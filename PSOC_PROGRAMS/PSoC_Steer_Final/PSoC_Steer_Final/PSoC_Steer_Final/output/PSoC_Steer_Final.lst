FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 13 D1 LJMP  _PSoC_GPIO_ISR_C   (0145)     ljmp _PSoC_GPIO_ISR_C
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0A B7 LJMP  _DUALADC_CNT1_ISR  (0149)     ljmp	_DUALADC_CNT1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 05 7A LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 05 7B LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 0A BD LJMP  _DUALADC_PWM16_ISR (0169)     ljmp	_DUALADC_PWM16_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 07 D9 LJMP  _TX8_ISR           (0173)     ljmp	_TX8_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 0A BA LJMP  _DUALADC_CNT2_ISR  (0177)     ljmp	_DUALADC_CNT2_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [prevPrt+178],0x0  (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [prevPrt+179],0x0  (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 0F LCALL 0x050F             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 08    MOV   X,0x8              (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 35    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 35    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 35    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 34    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 35    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 35 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 34    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 34    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 35    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 35 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 34    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 0D 2C LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
040A: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_dac_prac_Bank1
                                        (0019) export LoadConfigTBL_dac_prac_Bank0
                                        (0020) export LoadConfigTBL_dac_prac_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_dac_prac_Bank0:
                                        (0023) ;  Instance name Actuator_Pot, User Module PGA
                                        (0024) ;       Instance name Actuator_Pot, Block Name GAIN(ACB01)
                                        (0025) 	db		75h, feh		;Actuator_Pot_GAIN_CR0(ACB01CR0)
                                        (0026) 	db		76h, 21h		;Actuator_Pot_GAIN_CR1(ACB01CR1)
                                        (0027) 	db		77h, 20h		;Actuator_Pot_GAIN_CR2(ACB01CR2)
                                        (0028) 	db		74h, 00h		;Actuator_Pot_GAIN_CR3(ACB01CR3)
                                        (0029) ;  Instance name DUALADC, User Module DUALADC
                                        (0030) ;       Instance name DUALADC, Block Name ADC1(ASC10)
                                        (0031) 	db		80h, 90h		;DUALADC_bfADC1cr0(ASC10CR0)
                                        (0032) 	db		81h, 00h		;DUALADC_bfADC1cr1(ASC10CR1)
                                        (0033) 	db		82h, 61h		;DUALADC_bfADC1cr2(ASC10CR2)
                                        (0034) 	db		83h, f0h		;DUALADC_bfADC1cr3(ASC10CR3)
                                        (0035) ;       Instance name DUALADC, Block Name ADC2(ASD11)
                                        (0036) 	db		84h, 90h		;DUALADC_bfADC2cr0(ASD11CR0)
                                        (0037) 	db		85h, 00h		;DUALADC_bfADC2cr1(ASD11CR1)
                                        (0038) 	db		86h, 60h		;DUALADC_bfADC2cr2(ASD11CR2)
                                        (0039) 	db		87h, f0h		;DUALADC_bfADC2cr3(ASD11CR3)
                                        (0040) ;       Instance name DUALADC, Block Name CNT1(DBB00)
                                        (0041) 	db		23h, 00h		;DUALADC_bCounter1_CR0(DBB00CR0)
                                        (0042) 	db		21h, 00h		;DUALADC_bPeriod1(DBB00DR1)
                                        (0043) 	db		22h, 00h		;DUALADC_bCompare1(DBB00DR2)
                                        (0044) ;       Instance name DUALADC, Block Name CNT2(DCB13)
                                        (0045) 	db		3fh, 00h		;DUALADC_bCounter2_CR0(DCB13CR0)
                                        (0046) 	db		3dh, 00h		;DUALADC_bPeriod2(DCB13DR1)
                                        (0047) 	db		3eh, 00h		;DUALADC_bCompare2(DCB13DR2)
                                        (0048) ;       Instance name DUALADC, Block Name PWM16_LSB(DBB10)
                                        (0049) 	db		33h, 00h		;DUALADC_fPWM_LSB_CR0(DBB10CR0)
                                        (0050) 	db		31h, 00h		;DUALADC_bPWM_Period_LSB(DBB10DR1)
                                        (0051) 	db		32h, 00h		;DUALADC_bPWM_IntTime_LSB(DBB10DR2)
                                        (0052) ;       Instance name DUALADC, Block Name PWM16_MSB(DBB11)
                                        (0053) 	db		37h, 00h		;DUALADC_fPWM_MSB_CR0(DBB11CR0)
                                        (0054) 	db		35h, 00h		;DUALADC_bPWM_Period_MSB(DBB11DR1)
                                        (0055) 	db		36h, 00h		;DUALADC_bPWM_IntTime_MSB(DBB11DR2)
                                        (0056) ;  Instance name LCD, User Module LCD
                                        (0057) ;  Instance name Steer_Pot, User Module PGA
                                        (0058) ;       Instance name Steer_Pot, Block Name GAIN(ACB00)
                                        (0059) 	db		71h, feh		;Steer_Pot_GAIN_CR0(ACB00CR0)
                                        (0060) 	db		72h, 21h		;Steer_Pot_GAIN_CR1(ACB00CR1)
                                        (0061) 	db		73h, 20h		;Steer_Pot_GAIN_CR2(ACB00CR2)
                                        (0062) 	db		70h, 00h		;Steer_Pot_GAIN_CR3(ACB00CR3)
                                        (0063) ;  Instance name TX8, User Module TX8
                                        (0064) ;       Instance name TX8, Block Name TX8(DCB12)
                                        (0065) 	db		3bh, 00h		;TX8_CONTROL_REG  (DCB12CR0)
                                        (0066) 	db		39h, 00h		;TX8_TX_BUFFER_REG(DCB12DR1)
                                        (0067) 	db		3ah, 00h		;TX8_(DCB12DR2)
                                        (0068) ;  Instance name UART, User Module UART
                                        (0069) ;       Instance name UART, Block Name RX(DCB03)
                                        (0070) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0071) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0072) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0073) ;       Instance name UART, Block Name TX(DCB02)
                                        (0074) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0075) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0076) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0077) ;  Global Register values Bank 0
                                        (0078) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0079) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0080) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0081) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0082) 	db		e6h, 38h		; DecimatorControl_0 register (DEC_CR0)
                                        (0083) 	db		e7h, 08h		; DecimatorControl_1 register (DEC_CR1)
                                        (0084) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0085) 	db		b0h, 31h		; Row_0_InputMux register (RDI0RI)
                                        (0086) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0087) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0088) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0089) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0090) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0091) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0092) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0093) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0094) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0095) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0096) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0097) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0098) 	db		beh, 80h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0099) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0100) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0101) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0102) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0103) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0104) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0105) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0106) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0107) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0108) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0109) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0110) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0111) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0112) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0113) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0114) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0115) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0116) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0117) 	db		ffh
                                        (0118) LoadConfigTBL_dac_prac_Bank1:
                                        (0119) ;  Instance name Actuator_Pot, User Module PGA
                                        (0120) ;       Instance name Actuator_Pot, Block Name GAIN(ACB01)
                                        (0121) ;  Instance name DUALADC, User Module DUALADC
                                        (0122) ;       Instance name DUALADC, Block Name ADC1(ASC10)
                                        (0123) ;       Instance name DUALADC, Block Name ADC2(ASD11)
                                        (0124) ;       Instance name DUALADC, Block Name CNT1(DBB00)
                                        (0125) 	db		20h, 21h		;DUALADC_fCounter1FN(DBB00FN)
                                        (0126) 	db		21h, 45h		;DUALADC_fCounter1SL(DBB00IN)
                                        (0127) 	db		22h, 40h		;DUALADC_fCounter1OS(DBB00OU)
                                        (0128) ;       Instance name DUALADC, Block Name CNT2(DCB13)
                                        (0129) 	db		3ch, 21h		;DUALADC_fCounter2FN(DCB13FN)
                                        (0130) 	db		3dh, 55h		;DUALADC_fCounter2SL(DCB13IN)
                                        (0131) 	db		3eh, 40h		;DUALADC_fCounter2OS(DCB13OU)
                                        (0132) ;       Instance name DUALADC, Block Name PWM16_LSB(DBB10)
                                        (0133) 	db		30h, 01h		;DUALADC_bfPWM_LSB_FN(DBB10FN)
                                        (0134) 	db		31h, 15h		;DUALADC_(DBB10IN)
                                        (0135) 	db		32h, 40h		;DUALADC_(DBB10OU)
                                        (0136) ;       Instance name DUALADC, Block Name PWM16_MSB(DBB11)
                                        (0137) 	db		34h, 21h		;DUALADC_bfPWM_MSB_FN(DBB11FN)
                                        (0138) 	db		35h, 35h		;DUALADC_(DBB11IN)
                                        (0139) 	db		36h, 40h		;DUALADC_(DBB11OU)
                                        (0140) ;  Instance name LCD, User Module LCD
                                        (0141) ;  Instance name Steer_Pot, User Module PGA
                                        (0142) ;       Instance name Steer_Pot, Block Name GAIN(ACB00)
                                        (0143) ;  Instance name TX8, User Module TX8
                                        (0144) ;       Instance name TX8, Block Name TX8(DCB12)
                                        (0145) 	db		38h, 0dh		;TX8_FUNC_REG     (DCB12FN)
                                        (0146) 	db		39h, 01h		;TX8_INPUT_REG    (DCB12IN)
                                        (0147) 	db		3ah, 47h		;TX8_OUTPUT_REG   (DCB12OU)
                                        (0148) ;  Instance name UART, User Module UART
                                        (0149) ;       Instance name UART, Block Name RX(DCB03)
                                        (0150) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0151) 	db		2dh, e1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0152) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0153) ;       Instance name UART, Block Name TX(DCB02)
                                        (0154) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0155) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0156) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0157) ;  Global Register values Bank 1
                                        (0158) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0159) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0160) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0161) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0162) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0163) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0164) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0165) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0166) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0167) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0168) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0169) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0170) 	db		e1h, b1h		; OscillatorControl_1 register (OSC_CR1)
                                        (0171) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0172) 	db		dfh, 9bh		; OscillatorControl_3 register (OSC_CR3)
                                        (0173) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0174) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0175) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0176) 	db		ffh
                                        (0177) AREA psoc_config(rom, rel)
                                        (0178) LoadConfigTBL_dac_prac_Ordered:
                                        (0179) ;  Ordered Global Register values
                                        (0180) 	M8C_SetBank0
040C: 62 00 00 MOV   REG[0x0],0x0       (0181) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
040F: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
0411: 62 00 00 MOV   REG[0x0],0x0       (0183) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0414: 62 01 FF MOV   REG[0x1],0xFF      (0184) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0417: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
0419: 62 03 FF MOV   REG[0x3],0xFF      (0186) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
041C: 62 02 00 MOV   REG[0x2],0x0       (0187) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
041F: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
0421: 62 02 00 MOV   REG[0x2],0x0       (0189) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0424: 62 03 00 MOV   REG[0x3],0x0       (0190) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0427: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
0429: 62 01 00 MOV   REG[0x1],0x0       (0192) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
042C: 62 04 04 MOV   REG[0x4],0x4       (0193) 	mov	reg[04h], 04h		; Port_1_Data register (PRT1DR)
042F: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0431: 62 04 80 MOV   REG[0x4],0x80      (0195) 	mov	reg[04h], 80h		; Port_1_DriveMode_0 register (PRT1DM0)
0434: 62 05 7F MOV   REG[0x5],0x7F      (0196) 	mov	reg[05h], 7fh		; Port_1_DriveMode_1 register (PRT1DM1)
0437: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
0439: 62 07 0B MOV   REG[0x7],0xB       (0198) 	mov	reg[07h], 0bh		; Port_1_DriveMode_2 register (PRT1DM2)
043C: 62 06 C0 MOV   REG[0x6],0xC0      (0199) 	mov	reg[06h], c0h		; Port_1_GlobalSelect register (PRT1GS)
043F: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
0441: 62 06 00 MOV   REG[0x6],0x0       (0201) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0444: 62 07 30 MOV   REG[0x7],0x30      (0202) 	mov	reg[07h], 30h		; Port_1_IntCtrl_1 register (PRT1IC1)
0447: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
0449: 62 05 30 MOV   REG[0x5],0x30      (0204) 	mov	reg[05h], 30h		; Port_1_IntEn register (PRT1IE)
044C: 62 08 00 MOV   REG[0x8],0x0       (0205) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
044F: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
0451: 62 08 FF MOV   REG[0x8],0xFF      (0207) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0454: 62 09 00 MOV   REG[0x9],0x0       (0208) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0457: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
0459: 62 0B 00 MOV   REG[0xB],0x0       (0210) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
045C: 62 0A 80 MOV   REG[0xA],0x80      (0211) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
045F: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
0461: 62 0A 00 MOV   REG[0xA],0x0       (0213) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0464: 62 0B 00 MOV   REG[0xB],0x0       (0214) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0467: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
0469: 62 09 00 MOV   REG[0x9],0x0       (0216) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
046C: 62 0C 00 MOV   REG[0xC],0x0       (0217) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
046F: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
0471: 62 0C 00 MOV   REG[0xC],0x0       (0219) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0474: 62 0D 00 MOV   REG[0xD],0x0       (0220) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0477: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
0479: 62 0F 00 MOV   REG[0xF],0x0       (0222) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
047C: 62 0E 00 MOV   REG[0xE],0x0       (0223) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
047F: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
0481: 62 0E 00 MOV   REG[0xE],0x0       (0225) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0484: 62 0F 00 MOV   REG[0xF],0x0       (0226) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0487: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
0489: 62 0D 00 MOV   REG[0xD],0x0       (0228) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
048C: 62 10 00 MOV   REG[0x10],0x0      (0229) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
048F: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
0491: 62 10 00 MOV   REG[0x10],0x0      (0231) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0494: 62 11 00 MOV   REG[0x11],0x0      (0232) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0497: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
0499: 62 13 00 MOV   REG[0x13],0x0      (0234) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
049C: 62 12 00 MOV   REG[0x12],0x0      (0235) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
049F: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
04A1: 62 12 00 MOV   REG[0x12],0x0      (0237) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04A4: 62 13 00 MOV   REG[0x13],0x0      (0238) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04A7: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
04A9: 62 11 00 MOV   REG[0x11],0x0      (0240) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04AC: 62 14 00 MOV   REG[0x14],0x0      (0241) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04AF: 71 10    OR    F,0x10             
                                        (0242) 	M8C_SetBank1
04B1: 62 14 00 MOV   REG[0x14],0x0      (0243) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04B4: 62 15 00 MOV   REG[0x15],0x0      (0244) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04B7: 70 EF    AND   F,0xEF             
                                        (0245) 	M8C_SetBank0
04B9: 62 17 00 MOV   REG[0x17],0x0      (0246) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04BC: 62 16 00 MOV   REG[0x16],0x0      (0247) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04BF: 71 10    OR    F,0x10             
                                        (0248) 	M8C_SetBank1
04C1: 62 16 00 MOV   REG[0x16],0x0      (0249) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04C4: 62 17 00 MOV   REG[0x17],0x0      (0250) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04C7: 70 EF    AND   F,0xEF             
                                        (0251) 	M8C_SetBank0
04C9: 62 15 00 MOV   REG[0x15],0x0      (0252) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04CC: 62 18 00 MOV   REG[0x18],0x0      (0253) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
04CF: 71 10    OR    F,0x10             
                                        (0254) 	M8C_SetBank1
04D1: 62 18 00 MOV   REG[0x18],0x0      (0255) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
04D4: 62 19 00 MOV   REG[0x19],0x0      (0256) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
04D7: 70 EF    AND   F,0xEF             
                                        (0257) 	M8C_SetBank0
04D9: 62 1B 00 MOV   REG[0x1B],0x0      (0258) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
04DC: 62 1A 00 MOV   REG[0x1A],0x0      (0259) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
04DF: 71 10    OR    F,0x10             
                                        (0260) 	M8C_SetBank1
04E1: 62 1A 00 MOV   REG[0x1A],0x0      (0261) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
04E4: 62 1B 00 MOV   REG[0x1B],0x0      (0262) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
04E7: 70 EF    AND   F,0xEF             
                                        (0263) 	M8C_SetBank0
04E9: 62 19 00 MOV   REG[0x19],0x0      (0264) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
04EC: 62 1C 00 MOV   REG[0x1C],0x0      (0265) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
04EF: 71 10    OR    F,0x10             
                                        (0266) 	M8C_SetBank1
04F1: 62 1C 00 MOV   REG[0x1C],0x0      (0267) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
04F4: 62 1D 00 MOV   REG[0x1D],0x0      (0268) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
04F7: 70 EF    AND   F,0xEF             
                                        (0269) 	M8C_SetBank0
04F9: 62 1F 00 MOV   REG[0x1F],0x0      (0270) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
04FC: 62 1E 00 MOV   REG[0x1E],0x0      (0271) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
04FF: 71 10    OR    F,0x10             
                                        (0272) 	M8C_SetBank1
0501: 62 1E 00 MOV   REG[0x1E],0x0      (0273) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0504: 62 1F 00 MOV   REG[0x1F],0x0      (0274) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0507: 70 EF    AND   F,0xEF             
                                        (0275) 	M8C_SetBank0
0509: 62 1D 00 MOV   REG[0x1D],0x0      (0276) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
050C: 70 EF    AND   F,0xEF             
                                        (0277) 	M8C_SetBank0
050E: 7F       RET                      (0278) 	ret
                                        (0279) 
                                        (0280) 
                                        (0281) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_dac_prac
                                        (0026) export _LoadConfig_dac_prac
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
050F: 55 02 00 MOV   [lastValue|error|brakePot|steerPot+2],0x0(0065) 	mov		[Port_2_Data_SHADE], 0h
0512: 55 03 FF MOV   [lastValue|error|brakePot|steerPot+3],0xFF(0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0515: 55 04 00 MOV   [lastValue|error|brakePot|steerPot+4],0x0(0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
0518: 7C 05 1F LCALL 0x051F             (0069) 	lcall	LoadConfig_dac_prac
051B: 7C 04 0A LCALL 0x040A             (0070) 	lcall	LoadConfigTBL_dac_prac_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
051E: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration dac_prac
                                        (0078) ;
                                        (0079) ;    Load configuration registers for dac_prac.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_dac_prac:
                                        (0096)  LoadConfig_dac_prac:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
051F: 10       PUSH  X                  (0099) 	push	x
0520: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0522: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0524: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0525: 50 02    MOV   A,0x2              (0104)     mov     A, >LoadConfigTBL_dac_prac_Bank0
0527: 57 1F    MOV   X,0x1F             (0105)     mov     X, <LoadConfigTBL_dac_prac_Bank0
0529: 7C 05 3A LCALL 0x053A             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
052C: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
052E: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
052F: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_dac_prac_Bank1
0531: 57 B8    MOV   X,0xB8             (0112)     mov     X, <LoadConfigTBL_dac_prac_Bank1
0533: 7C 05 3A LCALL 0x053A             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0536: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0538: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0539: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
053A: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
053C: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
053D: 08       PUSH  A                  (0143)     push    A
053E: 4F       MOV   X,SP               (0144)     mov     X, SP
053F: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0542: D0 04    JNC   0x0547             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0544: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0547: 18       POP   A                  (0149)     pop     A
0548: 20       POP   X                  (0150)     pop     X
0549: 70 EF    AND   F,0xEF             
054B: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
054E: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
054F: 08       PUSH  A                  (0156)     push    A
0550: 28       ROMX                     (0157)     romx                            ; Load register address from table
0551: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0553: A0 1F    JZ    0x0573             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0555: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0556: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0559: A0 03    JZ    0x055D             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
055B: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
055D: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
055F: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0560: 20       POP   X                  (0167)     pop     X
0561: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0562: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0564: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0565: 08       PUSH  A                  (0171)     push    A
0566: 28       ROMX                     (0172)     romx                            ; load config data from the table
0567: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0568: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
056A: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
056C: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
056D: 20       POP   X                  (0177)     pop     X
056E: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
056F: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0571: 8F D7    JMP   0x0549             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0573: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0575: 70 3F    AND   F,0x3F             
0577: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0579: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
057A: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
057B: 08       PUSH  A                  (0180)    push A
057C: 10       PUSH  X                  (0181)    push X
057D: 5D D3    MOV   A,REG[0xD3]        
057F: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
0580: 58 01    MOV   X,[lastValue|error|brakePot|steerPot+1](0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0582: 5D 2F    MOV   A,REG[0x2F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
0584: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
0585: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
0587: B0 04    JNZ   0x058C             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
0589: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
058A: 80 5E    JMP   0x05E9             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
058C: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
058D: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
058F: A0 12    JZ    0x05A2             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
0591: 2C 00    OR    [lastValue|error|brakePot|steerPot],A(0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0593: 49 2E 00 TST   REG[0x2E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
0596: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
0598: A0 50    JZ    0x05E9             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
059A: 41 2F FE AND   REG[0x2F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
059D: 43 2F 01 OR    REG[0x2F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
05A0: 80 48    JMP   0x05E9             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
05A2: 5D 2E    MOV   A,REG[0x2E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
05A4: 47 00 01 TST   [lastValue|error|brakePot|steerPot],0x1(0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
05A7: B0 41    JNZ   0x05E9             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
05A9: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
05AB: B0 14    JNZ   0x05C0             (0223)    jnz  .UARTRX_CHK_BACKSPACE
05AD: 2E 00 01 OR    [lastValue|error|brakePot|steerPot],0x1(0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
05B0: 62 D3 00 MOV   REG[0xD3],0x0      
05B3: 70 3F    AND   F,0x3F             
05B5: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05B7: 56 0D 00 MOV   [X+13],0x0         (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
05BA: 70 3F    AND   F,0x3F             
05BC: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05BE: 80 2A    JMP   0x05E9             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
05C0: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
05C2: C0 26    JC    0x05E9             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
05C4: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
05C7: 3C 01 1F CMP   [lastValue|error|brakePot|steerPot+1],0x1F(0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
05CA: C0 11    JC    0x05DC             (0254)    jc   .UARTRX_ISR_GETDATA
05CC: 70 3F    AND   F,0x3F             
05CE: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05D0: 56 0D 00 MOV   [X+13],0x0         (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
05D3: 70 3F    AND   F,0x3F             
05D5: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05D7: 2E 00 10 OR    [lastValue|error|brakePot|steerPot],0x10(0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
05DA: 80 0E    JMP   0x05E9             (0259)    jmp  .RESTORE_IDX_PP
05DC: 70 3F    AND   F,0x3F             
05DE: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
05E0: 54 0D    MOV   [X+13],A           (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
05E2: 70 3F    AND   F,0x3F             
05E4: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
05E6: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
05E7: 5A 01    MOV   [lastValue|error|brakePot|steerPot+1],X(0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
05E9: 18       POP   A                  
05EA: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
05EC: 20       POP   X                  (0275)    pop  X
05ED: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
05EE: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
05EF: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
05F2: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
05F5: 7F       RET                      (0182)    ret
05F6: 41 E1 FB AND   REG[0xE1],0xFB     
05F9: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
05FC: 7F       RET                      (0214)    ret
05FD: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
05FF: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0601: A0 07    JZ    0x0609             (0249)    jz    .SetModeRegEmpty
0603: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0606: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0608: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0609: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
060C: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
060E: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
060F: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0611: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0613: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
0615: 91 2A    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0617: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0618: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
061B: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
061E: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
061F: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0621: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0622: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0624: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0625: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0627: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0628: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
062A: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
062B: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
062D: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
062F: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0631: A0 06    JZ    0x0638             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0633: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0636: 80 04    JMP   0x063B             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0638: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
063B: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
063D: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
063E: 08       PUSH  A                  (0536)    push A
063F: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0641: A0 06    JZ    0x0648             (0538)    jz   .DisRxInt
0643: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0646: 80 04    JMP   0x064B             (0541)    jmp  .CheckTxInt
0648: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
064B: 18       POP   A                  (0547)    pop  A
064C: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
064E: A0 06    JZ    0x0655             (0549)    jz   .DisTxInt
0650: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0653: 80 04    JMP   0x0658             (0552)    jmp  .End_IntCntl
0655: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0658: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0669: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
066A: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
066B: 67       ASR   A                  (0603)    asr   A
066C: 67       ASR   A                  (0604)    asr   A
066D: 67       ASR   A                  (0605)    asr   A
066E: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0670: FF E7    INDEX 0x0659             (0607)    index UART_HEX_STR                  ; Get Hex value
0672: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0674: 18       POP   A                  (0609)    pop   A                             ; Restore value
0675: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0677: FF E0    INDEX 0x0659             (0611)    index UART_HEX_STR                  ; Get Hex value
0679: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
067B: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
067C: 4B       SWAP  A,X                (0645)    swap  A,X
067D: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
067F: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0680: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0682: 7F       RET                      (0650)    ret
0683: 49 2B 10 TST   REG[0x2B],0x10     
0686: AF FC    JZ    _UART_PutChar      
0688: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
068A: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
068B: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
068E: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0690: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0692: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0693: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0695: 08       PUSH  A                  (0756)    push A
0696: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0698: B0 04    JNZ   0x069D             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
069A: 18       POP   A                  (0759)    pop  A
069B: 80 0B    JMP   0x06A7             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
069D: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
069F: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
06A0: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
06A1: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
06A3: B0 03    JNZ   0x06A7             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
06A5: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
06A6: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
06A7: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
06A9: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
06AA: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
06AC: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
06AE: 08       PUSH  A                  (0819)    push A
06AF: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
06B1: B0 07    JNZ   0x06B9             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
06B3: 18       POP   A                  (0822)    pop  A
06B4: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
06B6: 4B       SWAP  A,X                (0824)    swap A,X
06B7: 80 07    JMP   0x06BF             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
06B9: 18       POP   A                  (0828)    pop  A
06BA: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
06BC: 4B       SWAP  A,X                (0830)    swap A,X
06BD: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
06BF: 7F       RET                      (0836)    ret
06C0: 70 BF    AND   F,0xBF             
06C2: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
06C4: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
06C6: A0 06    JZ    0x06CD             (0872)    jz    End_PutString                           ; Check for end of string
06C8: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
06CA: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
06CB: 8F F8    JMP   0x06C4             (0875)    jmp   .PutStringLoop                          ; Get next character
06CD: 70 3F    AND   F,0x3F             
06CF: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
06D1: 7F       RET                      (0879)    ret
06D2: 70 BF    AND   F,0xBF             
06D4: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
06D7: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
06D8: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
06DA: A0 1A    JZ    0x06F5             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
06DC: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
06DE: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
06E0: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
06E2: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
06E4: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
06E6: 49 2B 10 TST   REG[0x2B],0x10     
06E9: AF FC    JZ    0x06E6             
06EB: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
06ED: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
06EE: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
06F1: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
06F3: 8F E4    JMP   0x06D8             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
06F5: 70 3F    AND   F,0x3F             
06F7: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
06F9: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
06FA: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
06FB: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
06FE: B0 06    JNZ   0x0705             (0980)    jnz   .CW_WRITEIT
0700: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0703: A0 1D    JZ    0x0721             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0705: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0706: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0708: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
070A: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
070B: 49 2B 10 TST   REG[0x2B],0x10     
070E: AF FC    JZ    0x070B             
0710: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0712: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0713: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0716: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0719: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
071C: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
071F: 8F DB    JMP   0x06FB             (0995)    jmp   .CW_Loop
0721: 70 3F    AND   F,0x3F             
0723: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0725: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0726: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0727: 10       PUSH  X                  (1030)    push  X
0728: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0729: A0 0B    JZ    0x0735             (1032)    jz    .End_CPutString
072B: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
072D: 20       POP   X                  (1034)    pop   X
072E: 18       POP   A                  (1035)    pop   A
072F: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0730: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0732: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0733: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0735: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0737: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0738: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
073A: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
073C: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
073E: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0740: 7F       RET                      (1078)    ret
0741: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
0744: 55 0D 00 MOV   [lastValue|error|brakePot|steerPot+13],0x0(1122)    mov [UART_aRxBuffer], 0x00
0747: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
074A: 55 01 00 MOV   [lastValue|error|brakePot|steerPot+1],0x0(1124)    mov [UART_bRxCnt], 0x00
074D: 26 00 00 AND   [lastValue|error|brakePot|steerPot],0x0(1125)    and [UART_fStatus], 0x00
0750: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
0753: 55 47 00 MOV   [prevPrt+1],0x0    (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0756: 7F       RET                      (1129)    ret
0757: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
075A: 51 00    MOV   A,[lastValue|error|brakePot|steerPot](1165)    mov A,  [UART_fStatus]
075C: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
075E: 7F       RET                      (1168)    ret
075F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
0762: 51 00    MOV   A,[lastValue|error|brakePot|steerPot](1209)    mov A,  [UART_fStatus]
0764: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
0766: 26 00 0F AND   [lastValue|error|brakePot|steerPot],0xF(1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0769: 7F       RET                      (1213)    ret
076A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
076D: 51 01    MOV   A,[lastValue|error|brakePot|steerPot+1](1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
076F: 7F       RET                      (1246)    ret
0770: 70 BF    AND   F,0xBF             
0772: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
0775: 50 0D    MOV   A,0xD              (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
0777: 02 47    ADD   A,[prevPrt+1]      (1305)    add   A, [ptrParam]                      ; Add string offset
0779: 5C       MOV   X,A                (1306)    mov   X, A
077A: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
077D: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
077F: B0 04    JNZ   0x0784             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0781: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0782: 80 33    JMP   0x07B6             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0784: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
0786: B0 11    JNZ   0x0798             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0788: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
0789: 76 47    INC   [prevPrt+1]        (1318)    inc   [ptrParam]                         ;          the stored pointer.
078B: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
078D: 3C 47 1F CMP   [prevPrt+1],0x1F   (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
0790: BF F3    JNZ   0x0784             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0792: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0793: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0796: 80 1F    JMP   0x07B6             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
0798: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
0799: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
079A: 76 47    INC   [prevPrt+1]        (1334)    inc   [ptrParam]
079C: 3C 47 1F CMP   [prevPrt+1],0x1F   (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
079F: AF F3    JZ    0x0793             (1336)    jz    .TerminateString
07A1: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
07A3: A0 12    JZ    0x07B6             (1338)    jz    .End_GetNextParam
07A5: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
07A7: BF F1    JNZ   0x0799             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
07A9: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
07AC: 76 47    INC   [prevPrt+1]        (1342)    inc   [ptrParam]
07AE: 3C 47 1F CMP   [prevPrt+1],0x1F   (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
07B1: B0 04    JNZ   0x07B6             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
07B3: 55 47 1F MOV   [prevPrt+1],0x1F   (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
07B6: 20       POP   X                  (1348)    pop   X
07B7: 10       PUSH  X                  (1349)    push  X
07B8: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
07BB: B0 0A    JNZ   0x07C6             (1351)    jnz   .NotNullString
07BD: 20       POP   X                  (1352)    pop   X
07BE: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
07C0: 5B       MOV   A,X                (1354)    mov   A, X
07C1: 70 3F    AND   F,0x3F             
07C3: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
07C5: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
07C6: 20       POP   X                  (1360)    pop  X
07C7: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
07C9: 70 3F    AND   F,0x3F             
07CB: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
07CD: 7F       RET                      (1364)    ret
07CE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
07D1: 50 0D    MOV   A,0xD              (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
07D3: 02 47    ADD   A,[prevPrt+1]      (1397)    add  A, [ptrParam]                       ; Add string offset
07D5: 5C       MOV   X,A                (1398)    mov  X,A
07D6: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
07D8: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tx8int.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TX8INT.asm
                                        (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:27:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  TX8 Interrupt Service Rountine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "TX8.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _TX8_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _TX8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _TX8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07D9: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file TX8INT.asm
FILE: lib\tx8.asm                       (0001) ;;*****************************************************************************
07DA: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TX8.asm
                                        (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:27:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: TX8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ; include instance specific register definitions
                                        (0024) ;-----------------------------------------------
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "TX8.inc"
                                        (0028) 
                                        (0029) area UserModules (ROM, REL)
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) export   TX8_SetTxIntMode
                                        (0034) export  _TX8_SetTxIntMode
                                        (0035) export   TX8_EnableInt
                                        (0036) export  _TX8_EnableInt
                                        (0037) export   TX8_DisableInt
                                        (0038) export  _TX8_DisableInt
                                        (0039) export   TX8_Start
                                        (0040) export  _TX8_Start
                                        (0041) export   TX8_Stop
                                        (0042) export  _TX8_Stop
                                        (0043) export   TX8_SendData
                                        (0044) export  _TX8_SendData
                                        (0045) export   TX8_bReadTxStatus
                                        (0046) export  _TX8_bReadTxStatus
                                        (0047) 
                                        (0048) // Old labels, will be removed in future release
                                        (0049) // Do Not Use.
                                        (0050) export   bTX8_ReadTxStatus
                                        (0051) export  _bTX8_ReadTxStatus
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  High Level TX functions
                                        (0055) ;-----------------------------------------------
                                        (0056) export  TX8_PutSHexByte
                                        (0057) export _TX8_PutSHexByte
                                        (0058) export  TX8_PutSHexInt
                                        (0059) export _TX8_PutSHexInt
                                        (0060) 
                                        (0061) export  TX8_CPutString
                                        (0062) export _TX8_CPutString
                                        (0063) export  TX8_PutString
                                        (0064) export _TX8_PutString
                                        (0065) export  TX8_PutChar
                                        (0066) export _TX8_PutChar
                                        (0067) export  TX8_Write
                                        (0068) export _TX8_Write
                                        (0069) export  TX8_CWrite
                                        (0070) export _TX8_CWrite
                                        (0071) export  TX8_PutCRLF
                                        (0072) export _TX8_PutCRLF 
                                        (0073) 
                                        (0074) ;-----------------------------------------------
                                        (0075) ;  EQUATES
                                        (0076) ;-----------------------------------------------
                                        (0077) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0078) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL)
                                        (0081) 
                                        (0082) .SECTION
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;  FUNCTION NAME: TX8_EnableInt
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                        (0088) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0089) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0090) ;
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;
                                        (0093) ;  ARGUMENTS: none
                                        (0094) ;
                                        (0095) ;  RETURNS: none
                                        (0096) ;
                                        (0097) ;  SIDE EFFECTS:
                                        (0098) ;    The A and X registers may be modified by this or future implementations
                                        (0099) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0100) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0101) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0102) ;    functions.
                                        (0103) ;
                                        (0104)  TX8_EnableInt:
                                        (0105) _TX8_EnableInt:
                                        (0106)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0107)    M8C_EnableIntMask  TX8_INT_REG, TX8_bINT_MASK
                                        (0108)    RAM_EPILOGUE RAM_USE_CLASS_1
07DD: 7F       RET                      (0109)    ret
07DE: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0110) .ENDSECTION
                                        (0111) 
                                        (0112) .SECTION
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: TX8_DisableInt
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                        (0118) ;     associated with this User Module.
                                        (0119) ;
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:  none
                                        (0123) ;
                                        (0124) ;  RETURNS:  none
                                        (0125) ;
                                        (0126) ;  SIDE EFFECTS:
                                        (0127) ;    The A and X registers may be modified by this or future implementations
                                        (0128) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0129) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0130) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0131) ;    functions.
                                        (0132) ;
                                        (0133)  TX8_DisableInt:
                                        (0134) _TX8_DisableInt:
                                        (0135)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0136)    M8C_DisableIntMask TX8_INT_REG, TX8_bINT_MASK
                                        (0137)    RAM_EPILOGUE RAM_USE_CLASS_1
07E1: 7F       RET                      (0138)    ret
07E2: 71 10    OR    F,0x10             
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: TX8_SetTxIntMode(BYTE bTxIntMode)
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0150) ;        Passed in the A register
                                        (0151) ;
                                        (0152) ;  RETURNS:
                                        (0153) ;     none.
                                        (0154) ;
                                        (0155) ;  SIDE EFFECTS:
                                        (0156) ;    The A and X registers may be modified by this or future implementations
                                        (0157) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0158) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0159) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0160) ;    functions.
                                        (0161) ;
                                        (0162) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0163) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0164) ;     on TX register empty or TX transmit complete
                                        (0165) ;
                                        (0166)  TX8_SetTxIntMode:
                                        (0167) _TX8_SetTxIntMode:
                                        (0168)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0169)    M8C_SetBank1
07E4: 21 01    AND   A,0x1              (0170)    and   A, TX8_INT_MODE_TX_COMPLETE
07E6: A0 07    JZ    0x07EE             (0171)    jz    .SetModeRegEmpty
07E8: 43 38 10 OR    REG[0x38],0x10     (0172)    or    REG[TX8_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
07EB: 70 EF    AND   F,0xEF             
                                        (0173)    M8C_SetBank0
                                        (0174)    RAM_EPILOGUE RAM_USE_CLASS_1
07ED: 7F       RET                      (0175)    ret
                                        (0176) 
                                        (0177) .SetModeRegEmpty:
07EE: 41 38 EF AND   REG[0x38],0xEF     (0178)    and   REG[TX8_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
07F1: 70 EF    AND   F,0xEF             
                                        (0179)    M8C_SetBank0
                                        (0180)    RAM_EPILOGUE RAM_USE_CLASS_1
07F3: 7F       RET                      (0181)    ret
                                        (0182) .ENDSECTION
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: TX8_Start(BYTE bParity)
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0190) ;     The transmitter will begin transmitting if a byte has been written into the
                                        (0191) ;     transmit buffer.
                                        (0192) ;
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                        (0197) ;
                                        (0198) ;  RETURNS:  none
                                        (0199) ;
                                        (0200) ;  SIDE EFFECTS:
                                        (0201) ;    The A and X registers may be modified by this or future implementations
                                        (0202) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0203) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0204) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0205) ;    functions.
                                        (0206) ;
                                        (0207)  TX8_Start:
                                        (0208) _TX8_Start:
                                        (0209)    RAM_PROLOGUE RAM_USE_CLASS_1
07F4: 29 01    OR    A,0x1              (0210)    or    A, bfCONTROL_REG_START_BIT
07F6: 60 3B    MOV   REG[0x3B],A        (0211)    mov   REG[TX8_CONTROL_REG], A
                                        (0212)    RAM_EPILOGUE RAM_USE_CLASS_1
07F8: 7F       RET                      (0213)    ret
                                        (0214) .ENDSECTION
                                        (0215) 
                                        (0216) .SECTION
                                        (0217) ;-----------------------------------------------------------------------------
                                        (0218) ;  FUNCTION NAME: TX8_Stop
                                        (0219) ;
                                        (0220) ;  DESCRIPTION:
                                        (0221) ;     Disables TX8 operation.
                                        (0222) ;
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:  none
                                        (0226) ;
                                        (0227) ;  RETURNS:  none
                                        (0228) ;
                                        (0229) ;  SIDE EFFECTS:
                                        (0230) ;    The A and X registers may be modified by this or future implementations
                                        (0231) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0232) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0233) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0234) ;    functions.
                                        (0235) ;
                                        (0236)  TX8_Stop:
                                        (0237) _TX8_Stop:
                                        (0238)    RAM_PROLOGUE RAM_USE_CLASS_1
07F9: 41 3B FE AND   REG[0x3B],0xFE     (0239)    and   REG[TX8_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
07FC: 7F       RET                      (0241)    ret
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: TX8_SendData
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Sends one byte through serial port.
                                        (0250) ;
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;
                                        (0253) ;  ARGUMENTS:
                                        (0254) ;     BYTE  TxData - data to transmit.
                                        (0255) ;
                                        (0256) ;  RETURNS:
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;
                                        (0265)  TX8_SendData:
                                        (0266) _TX8_SendData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
07FD: 60 39    MOV   REG[0x39],A        (0268)    mov REG[TX8_TX_BUFFER_REG], A
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_1
07FF: 7F       RET                      (0270)    ret
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) .SECTION
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;  FUNCTION NAME: TX8_bReadTxStatus
                                        (0276) ;
                                        (0277) ;  DESCRIPTION:
                                        (0278) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0279) ;
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS:
                                        (0283) ;
                                        (0284) ;  RETURNS:
                                        (0285) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                        (0286) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                        (0287) ;
                                        (0288) ;  SIDE EFFECTS:
                                        (0289) ;    The A and X registers may be modified by this or future implementations
                                        (0290) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0291) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0292) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0293) ;    functions.
                                        (0294) ;
                                        (0295)  TX8_bReadTxStatus:
                                        (0296) _TX8_bReadTxStatus:
                                        (0297)  bTX8_ReadTxStatus:
                                        (0298) _bTX8_ReadTxStatus:
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_1
0800: 5D 3B    MOV   A,REG[0x3B]        (0300)    mov A,  REG[TX8_CONTROL_REG]
                                        (0301)    RAM_EPILOGUE RAM_USE_CLASS_1
0802: 7F       RET                      (0302)    ret
                                        (0303) 
                                        (0304) .ENDSECTION
                                        (0305) 
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: TX8_PutSHexByte
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0311) ;
                                        (0312) ;  ARGUMENTS:
                                        (0313) ;     A  => (BYTE) Data/char to be printed
                                        (0314) ;
                                        (0315) ;  RETURNS:
                                        (0316) ;     none.
                                        (0317) ;
                                        (0318) ;  SIDE EFFECTS:
                                        (0319) ;    The A and X registers may be modified by this or future implementations
                                        (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0323) ;    functions.
                                        (0324) ;
                                        (0325) .LITERAL
                                        (0326) TX8_HEX_STR:
                                        (0327)      DS    "0123456789ABCDEF"
                                        (0328) .ENDLITERAL
                                        (0329) 
                                        (0330) .SECTION
                                        (0331)  TX8_PutSHexByte:
                                        (0332) _TX8_PutSHexByte:
                                        (0333)     RAM_PROLOGUE RAM_USE_CLASS_1
0813: 08       PUSH  A                  (0334)     push  A                            ; Save lower nibble
0814: 67       ASR   A                  (0335)     asr   A                            ; Shift high nibble to right
0815: 67       ASR   A                  (0336)     asr   A
0816: 67       ASR   A                  (0337)     asr   A
0817: 67       ASR   A                  (0338)     asr   A
0818: 21 0F    AND   A,0xF              (0339)     and   A,0Fh                        ; Mask off nibble
081A: FF E7    INDEX 0x0803             (0340)     index TX8_HEX_STR                  ; Get Hex value
081C: 90 0F    CALL  _TX8_PutChar       (0341)     call  TX8_PutChar                  ; Write data to screen
081E: 18       POP   A                  (0342)     pop   A                            ; Restore value
081F: 21 0F    AND   A,0xF              (0343)     and   A,0Fh                        ; Mask off lower nibble
0821: FF E0    INDEX 0x0803             (0344)     index TX8_HEX_STR                  ; Get Hex value
0823: 90 08    CALL  _TX8_PutChar       (0345)     call  TX8_PutChar                  ; Write data to screen
                                        (0346)     RAM_EPILOGUE RAM_USE_CLASS_1
0825: 7F       RET                      (0347)     ret
                                        (0348) .ENDSECTION
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: TX8_PutSHexInt
                                        (0353) ;
                                        (0354) ;  DESCRIPTION:
                                        (0355) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0356) ;
                                        (0357) ;  ARGUMENTS:
                                        (0358) ;     Pointer to string
                                        (0359) ;     A  => ASB of Int
                                        (0360) ;     X  => MSB of Int
                                        (0361) ;
                                        (0362) ;  RETURNS:
                                        (0363) ;     none.
                                        (0364) ;
                                        (0365) ;  SIDE EFFECTS:
                                        (0366) ;    The A and X registers may be modified by this or future implementations
                                        (0367) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0368) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0369) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0370) ;    functions.
                                        (0371) ;
                                        (0372)  TX8_PutSHexInt:
                                        (0373) _TX8_PutSHexInt:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_1
0826: 4B       SWAP  A,X                (0375)     swap  A,X
0827: 9F EA    CALL  _TX8_PutSHexByte   (0376)     call  TX8_PutSHexByte              ; Print MSB
0829: 5B       MOV   A,X                (0377)     mov   A,X                          ; Move LSB into position
082A: 9F E7    CALL  _TX8_PutSHexByte   (0378)     call  TX8_PutSHexByte              ; Print LSB
                                        (0379)     RAM_EPILOGUE RAM_USE_CLASS_1
082C: 7F       RET                      (0380)     ret
082D: 49 3B 10 TST   REG[0x3B],0x10     
0830: AF FC    JZ    _TX8_PutChar       
0832: 60 39    MOV   REG[0x39],A        
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) .SECTION
                                        (0384) ;-----------------------------------------------------------------------------
                                        (0385) ;  FUNCTION NAME: TX8_PutChar
                                        (0386) ;
                                        (0387) ;  DESCRIPTION:
                                        (0388) ;     Send character out through UART TX port.
                                        (0389) ;
                                        (0390) ;
                                        (0391) ;  ARGUMENTS:
                                        (0392) ;     A has Character to send to UART Tx Port
                                        (0393) ;
                                        (0394) ;  RETURNS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  SIDE EFFECTS:
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;
                                        (0404)    macro InLinePutChar( Source )
                                        (0405) .BufEmptyWaitLoop:
                                        (0406)    tst REG[TX8_CONTROL_REG], TX8_TX_BUFFER_EMPTY    ; Check Tx Status
                                        (0407)    jz  .BufEmptyWaitLoop
                                        (0408)    mov REG[TX8_TX_BUFFER_REG], @Source    ; Write data to Tx Port
                                        (0409)    endm
                                        (0410) 
                                        (0411) 
                                        (0412)  TX8_PutChar:
                                        (0413) _TX8_PutChar:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0415)    InLinePutChar A
                                        (0416)    RAM_EPILOGUE RAM_USE_CLASS_1
0834: 7F       RET                      (0417)    ret
0835: 70 BF    AND   F,0xBF             
0837: 60 D3    MOV   REG[0xD3],A        
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) 
                                        (0422) ;-----------------------------------------------
                                        (0423) ;  High Level TX functions
                                        (0424) ;-----------------------------------------------
                                        (0425) 
                                        (0426) 
                                        (0427) .SECTION
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;  FUNCTION NAME: TX8_PutString
                                        (0430) ;
                                        (0431) ;  DESCRIPTION:
                                        (0432) ;     Send String out through UART TX port.
                                        (0433) ;
                                        (0434) ;
                                        (0435) ;  ARGUMENTS:
                                        (0436) ;     Pointer to String
                                        (0437) ;     A has MSB of string address
                                        (0438) ;     X has LSB of string address
                                        (0439) ;
                                        (0440) ;  RETURNS:
                                        (0441) ;     none
                                        (0442) ;
                                        (0443) ;  SIDE EFFECTS:
                                        (0444) ;    The A and X registers may be modified by this or future implementations
                                        (0445) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0446) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0447) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0448) ;    functions.
                                        (0449) ;          
                                        (0450) ;    Currently only the page pointer registers listed below are modified: 
                                        (0451) ;          IDX_PP
                                        (0452) ;
                                        (0453)  TX8_PutString:
                                        (0454) _TX8_PutString:
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0456)    RAM_SETPAGE_IDX A
                                        (0457) .PutStringLoop:
0839: 52 00    MOV   A,[X+0]            (0458)    mov   A,[X]                             ; Get value pointed to by X
083B: A0 06    JZ    0x0842             (0459)    jz    End_PutString                     ; Check for end of string
083D: 9F EE    CALL  _TX8_PutChar       (0460)    call  TX8_PutChar                        ; Send character to Tx port
083F: 75       INC   X                  (0461)    inc   X                                 ; Advance pointer to next character
0840: 8F F8    JMP   0x0839             (0462)    jmp   .PutStringLoop                     ; Get next character
0842: 70 3F    AND   F,0x3F             
0844: 71 C0    OR    F,0xC0             
                                        (0463) 
                                        (0464) End_PutString:
                                        (0465)    RAM_EPILOGUE RAM_USE_CLASS_3
0846: 7F       RET                      (0466)    ret
0847: 70 BF    AND   F,0xBF             
0849: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0467) .ENDSECTION
                                        (0468) 
                                        (0469) .SECTION
                                        (0470) ;-----------------------------------------------------------------------------
                                        (0471) ;  FUNCTION NAME: TX8_Write
                                        (0472) ;
                                        (0473) ;  DESCRIPTION:
                                        (0474) ;     Send String of length X to serial port
                                        (0475) ;
                                        (0476) ;
                                        (0477) ;  ARGUMENTS:
                                        (0478) ;     Pointer to String
                                        (0479) ;     [SP-5] Count of characters to send
                                        (0480) ;     [SP-4] has MSB of string address
                                        (0481) ;     [SP-3] has LSB of string address
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;     none
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) ;    Currently only the page pointer registers listed below are modified: 
                                        (0494) ;          IDX_PP
                                        (0495) ;
                                        (0496) CNT_LEN:    equ -5           ; Length of data to send
                                        (0497) STR_MSB:    equ -4           ; MSB pointer of string
                                        (0498) STR_LSB:    equ -3           ; LSB pointer of string
                                        (0499) 
                                        (0500)  TX8_Write:
                                        (0501) _TX8_Write:
                                        (0502)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0503)    RAM_SETPAGE_IDX2STK
084C: 4F       MOV   X,SP               (0504)    mov   X, SP
                                        (0505) 
                                        (0506) .NextByteLoop:
084D: 52 FB    MOV   A,[X-5]            (0507)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
084F: A0 1A    JZ    0x086A             (0508)    jz    .End_Write
0851: 7B FB    DEC   [X-5]              (0509)    dec   [X+CNT_LEN]                       ; Decrement counter
                                        (0510) 
                                        (0511)    IF SYSTEM_LARGE_MEMORY_MODEL
0853: 52 FC    MOV   A,[X-4]            (0512)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0513)    ENDIF
                                        (0514) 
0855: 59 FD    MOV   X,[X-3]            (0515)    mov   X,[X+STR_LSB]                     ; Get character to send
0857: 60 D3    MOV   REG[0xD3],A        
                                        (0516)    RAM_SETPAGE_IDX A                        ; switch index pages
0859: 52 00    MOV   A,[X+0]            (0517)    mov   A,[X]
085B: 49 3B 10 TST   REG[0x3B],0x10     
085E: AF FC    JZ    0x085B             
0860: 60 39    MOV   REG[0x39],A        
                                        (0518)    InLinePutChar A                          ; Send character to UART
0862: 4F       MOV   X,SP               (0519)    mov   X, SP
0863: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0520)    RAM_SETPAGE_IDX2STK
0866: 77 FD    INC   [X-3]              (0521)    inc   [X+STR_LSB]
0868: 8F E4    JMP   0x084D             (0522)    jmp   .NextByteLoop
086A: 70 3F    AND   F,0x3F             
086C: 71 C0    OR    F,0xC0             
                                        (0523) 
                                        (0524) .End_Write:
                                        (0525)    RAM_EPILOGUE RAM_USE_CLASS_3
086E: 7F       RET                      (0526)    ret
                                        (0527) .ENDSECTION
                                        (0528) 
                                        (0529) .SECTION
                                        (0530) ;-----------------------------------------------------------------------------
                                        (0531) ;  FUNCTION NAME: TX8_CWrite
                                        (0532) ;
                                        (0533) ;             WARNING WARNING NOT COMPLETE
                                        (0534) ;
                                        (0535) ;  DESCRIPTION:
                                        (0536) ;     Send String of length X to serial port
                                        (0537) ;
                                        (0538) ;  ARGUMENTS:
                                        (0539) ;     Pointer to String
                                        (0540) ;     [SP-6] MSB of Count of character to send
                                        (0541) ;     [SP-5] LSB of Count of character to send
                                        (0542) ;     [SP-4] has MSB of string address
                                        (0543) ;     [SP-3] has LSB of string address
                                        (0544) ;
                                        (0545) ;  RETURNS:
                                        (0546) ;     none
                                        (0547) ;
                                        (0548) ;  SIDE EFFECTS:
                                        (0549) ;    The A and X registers may be modified by this or future implementations
                                        (0550) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0551) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0552) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0553) ;    functions.
                                        (0554) ;
                                        (0555) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0556) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0557) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0558) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0559) 
                                        (0560)  TX8_CWrite:
                                        (0561) _TX8_CWrite:
                                        (0562)    RAM_PROLOGUE RAM_USE_CLASS_2
086F: 4F       MOV   X,SP               (0563)    mov   X,SP
                                        (0564) 
                                        (0565) .CW_Loop:
                                        (0566)                                              ; Check for zero counter
0870: 3D FA 00 CMP   [X-6],0x0          (0567)    cmp   [X+CLEN_MSB],0x00
0873: B0 06    JNZ   0x087A             (0568)    jnz   .CW_WRITEIT
0875: 3D FB 00 CMP   [X-5],0x0          (0569)    cmp   [X+CLEN_LSB],0x00
0878: A0 1D    JZ    0x0896             (0570)    jz    .End_CWrite                         ; Leave if done
                                        (0571) 
                                        (0572) .CW_WRITEIT:                                 ; Save pointers
087A: 10       PUSH  X                  (0573)    push  X
087B: 52 FC    MOV   A,[X-4]            (0574)    mov   A,[X+CSTR_MSB]
087D: 59 FD    MOV   X,[X-3]            (0575)    mov   X,[X+CSTR_LSB]
087F: 28       ROMX                     (0576)    romx                                     ; Get character from ROM
0880: 49 3B 10 TST   REG[0x3B],0x10     
0883: AF FC    JZ    0x0880             
0885: 60 39    MOV   REG[0x39],A        
                                        (0577)    InLinePutChar A
0887: 20       POP   X                  (0578)    pop   X
                                        (0579) 
0888: 07 FD 01 ADD   [X-3],0x1          (0580)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
088B: 0F FC 00 ADC   [X-4],0x0          (0581)    adc   [X+CSTR_MSB],0
                                        (0582) 
                                        (0583)                                             ; Dec the counter
088E: 17 FB 01 SUB   [X-5],0x1          (0584)    sub   [X+CLEN_LSB],0x01
0891: 1F FA 00 SBB   [X-6],0x0          (0585)    sbb   [X+CLEN_MSB],0x00
                                        (0586) 
0894: 8F DB    JMP   0x0870             (0587)    jmp   .CW_Loop
                                        (0588) 
                                        (0589) .End_CWrite:
                                        (0590)    RAM_EPILOGUE RAM_USE_CLASS_1
0896: 7F       RET                      (0591)    ret
                                        (0592) .ENDSECTION
                                        (0593) 
                                        (0594) .SECTION
                                        (0595) ;-----------------------------------------------------------------------------
                                        (0596) ;  FUNCTION NAME: TX8_CPutString
                                        (0597) ;
                                        (0598) ;  DESCRIPTION:
                                        (0599) ;     Send String out through UART TX port.
                                        (0600) ;
                                        (0601) ;
                                        (0602) ;  ARGUMENTS:
                                        (0603) ;     Pointer to String
                                        (0604) ;     A has MSB of string address
                                        (0605) ;     X has LSB of string address
                                        (0606) ;
                                        (0607) ;  RETURNS:
                                        (0608) ;     none
                                        (0609) ;
                                        (0610) ;  SIDE EFFECTS:
                                        (0611) ;    The A and X registers may be modified by this or future implementations
                                        (0612) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0613) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0614) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0615) ;    functions.
                                        (0616) ;
                                        (0617)  TX8_CPutString:
                                        (0618) _TX8_CPutString:
                                        (0619)    RAM_PROLOGUE RAM_USE_CLASS_1   
0897: 08       PUSH  A                  (0620)    push  A                                       ; Store ROM pointer
0898: 10       PUSH  X                  (0621)    push  X
0899: 28       ROMX                     (0622)    romx                                          ; Get character from ROM
089A: A0 0B    JZ    0x08A6             (0623)    jz    .End_CPutString
089C: 9F 8F    CALL  _TX8_PutChar       (0624)    call  TX8_PutChar                        ; Print character
089E: 20       POP   X                  (0625)    pop   X
089F: 18       POP   A                  (0626)    pop   A
08A0: 75       INC   X                  (0627)    inc   X                                       ; Inc LSB of pointer
08A1: DF F5    JNC   _TX8_CPutString    (0628)    jnc   TX8_CPutString                          ; Check for carry
08A3: 74       INC   A                  (0629)    inc   A                                       ; Inc MSB of pointer
08A4: 8F F2    JMP   _TX8_CPutString    (0630)    jmp   TX8_CPutString
                                        (0631) 
                                        (0632) 
                                        (0633) .End_CPutString:
08A6: 38 FE    ADD   SP,0xFE            (0634)    add   SP, -2
                                        (0635)    RAM_EPILOGUE RAM_USE_CLASS_1
08A8: 7F       RET                      (0636)    ret
                                        (0637) .ENDSECTION
                                        (0638) 
                                        (0639) .SECTION
                                        (0640) ;-----------------------------------------------------------------------------
                                        (0641) ;  FUNCTION NAME: TX8_PutCRLF
                                        (0642) ;
                                        (0643) ;  DESCRIPTION:
                                        (0644) ;     Send a CR and LF
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;     none.
                                        (0648) ;
                                        (0649) ;  RETURNS:
                                        (0650) ;     none.
                                        (0651) ;
                                        (0652) ;  SIDE EFFECTS:
                                        (0653) ;    The A and X registers may be modified by this or future implementations
                                        (0654) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0655) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0656) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0657) ;    functions.
                                        (0658) ;
                                        (0659)  TX8_PutCRLF:
                                        (0660) _TX8_PutCRLF:
                                        (0661)    RAM_PROLOGUE RAM_USE_CLASS_1
08A9: 50 0D    MOV   A,0xD              (0662)    mov  A,0x0D                        ; Send CR
08AB: 9F 80    CALL  _TX8_PutChar       (0663)    call TX8_PutChar
08AD: 50 0A    MOV   A,0xA              (0664)    mov  A,0x0A                        ; Send LF
08AF: 9F 7C    CALL  _TX8_PutChar       (0665)    call TX8_PutChar
                                        (0666)    RAM_EPILOGUE RAM_USE_CLASS_1
08B1: 7F       RET                      (0667)    ret
                                        (0668) .ENDSECTION
                                        (0669) 
                                        (0670) ; End of File TX8.asm
FILE: lib\steer_pot.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   Steer_Pot.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "Steer_Pot.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  Steer_Pot_Start
                                        (0060) export _Steer_Pot_Start
                                        (0061) export  Steer_Pot_SetPower
                                        (0062) export _Steer_Pot_SetPower
                                        (0063) 
                                        (0064) export  Steer_Pot_SetGain
                                        (0065) export _Steer_Pot_SetGain
                                        (0066) 
                                        (0067) export  Steer_Pot_Stop
                                        (0068) export _Steer_Pot_Stop
                                        (0069) 
                                        (0070) IF (Steer_Pot_AGNDBUFAPI)
                                        (0071) export  Steer_Pot_EnableAGNDBuffer
                                        (0072) export _Steer_Pot_EnableAGNDBuffer
                                        (0073) export  Steer_Pot_DisableAGNDBuffer
                                        (0074) export _Steer_Pot_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: Steer_Pot_Start
                                        (0092) ;  FUNCTION NAME: Steer_Pot_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  Steer_Pot_Start:
                                        (0111) _Steer_Pot_Start:
                                        (0112)  Steer_Pot_SetPower:
                                        (0113) _Steer_Pot_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
08B2: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
08B4: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
08B5: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
08B6: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[Steer_Pot_GAIN_CR2]                         ; read power value
08B8: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
08BA: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
08BC: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[Steer_Pot_GAIN_CR2], A                    ; move complete value back to register
08BE: 18       POP   A                  (0124)    pop  A
08BF: 70 3F    AND   F,0x3F             
08C1: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
08C3: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: Steer_Pot_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Steer_Pot_SetGain:
                                        (0154) _Steer_Pot_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
08C4: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
08C6: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
08C7: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
08C8: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[Steer_Pot_GAIN_CR0]                         ; read mux settings
08CA: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
08CC: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
08CF: B0 0E    JNZ   0x08DE             (0164)    jnz  .SETHIGHGAIN
08D1: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[Steer_Pot_GAIN_CR3],~EXGAIN                    ; Clear High Gain bit.
08D4: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
08D6: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[Steer_Pot_GAIN_CR0], A                         ; move complete value back to register
08D8: 18       POP   A                  (0168)    pop  A
08D9: 70 3F    AND   F,0x3F             
08DB: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
08DD: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
08DE: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
08E1: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
08E3: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[Steer_Pot_GAIN_CR0], A                         ; move complete value back to register
08E5: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[Steer_Pot_GAIN_CR3], EXGAIN                    ; Set High Gain bit.
08E8: 18       POP   A                  (0177)    pop  A
08E9: 70 3F    AND   F,0x3F             
08EB: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
08ED: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: Steer_Pot_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  Steer_Pot_Stop:
                                        (0203) _Steer_Pot_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
08EE: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[Steer_Pot_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
08F1: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (Steer_Pot_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: Steer_Pot_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  Steer_Pot_EnableAGNDBuffer:
                                        (0233) _Steer_Pot_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[Steer_Pot_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: Steer_Pot_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  Steer_Pot_DisableAGNDBuffer:
                                        (0261) _Steer_Pot_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[Steer_Pot_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File Steer_Pot.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
08F2: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
08F3: 10       PUSH  X                  (0209)     push  X
08F4: 28       ROMX                     (0210)     romx                               ; Get character from ROM
08F5: B0 04    JNZ   0x08FA             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
08F7: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
08F8: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
08F9: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
08FA: 90 44    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
08FC: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
08FD: 18       POP   A                  (0220)     pop   A
08FE: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
08FF: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0901: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0902: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0914: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0915: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0916: 67       ASR   A                  (0262)     asr   A
0917: 67       ASR   A                  (0263)     asr   A
0918: 67       ASR   A                  (0264)     asr   A
0919: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
091B: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
091D: 90 21    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
091F: 18       POP   A                  (0268)     pop   A                            ; Restore value
0920: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0922: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0924: 90 1A    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0926: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0927: 4B       SWAP  A,X                (0305)     swap  A,X
0928: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
092A: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
092B: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
092D: 7F       RET                      (0310)     ret
092E: 70 BF    AND   F,0xBF             
0930: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0932: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0934: A0 06    JZ    0x093B             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0936: 90 08    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0938: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0939: 8F F8    JMP   0x0932             (0351)     jmp   .Loop_PrString               ; Go get next character
093B: 70 3F    AND   F,0x3F             
093D: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
093F: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0940: 90 65    CALL  0x09A7             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0942: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0943: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0944: 67       ASR   A                  (0390)     asr   A
0945: 67       ASR   A                  (0391)     asr   A
0946: 67       ASR   A                  (0392)     asr   A
0947: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0949: 90 3B    CALL  0x0986             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
094B: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
094C: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
094E: 40       NOP                      (0397)     nop
094F: 40       NOP                      (0398)     nop
0950: 40       NOP                      (0399)     nop
0951: 90 33    CALL  0x0986             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0953: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0954: 90 51    CALL  0x09A7             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0956: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0957: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0958: 67       ASR   A                  (0436)     asr   A
0959: 67       ASR   A                  (0437)     asr   A
095A: 67       ASR   A                  (0438)     asr   A
095B: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
095D: 90 09    CALL  0x0968             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
095F: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0960: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0962: 40       NOP                      (0443)     nop
0963: 40       NOP                      (0444)     nop
0964: 40       NOP                      (0445)     nop
0965: 90 01    CALL  0x0968             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0967: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0968: 08       PUSH  A                  (0477)     push  A
0969: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
096C: 26 02 80 AND   [lastValue|error|brakePot|steerPot+2],0x80(0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
096F: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0480)     mov   A,[Port_2_Data_SHADE]
0971: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0973: 18       POP   A                  (0483)     pop   A
0974: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0976: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0978: 2A 02    OR    A,[lastValue|error|brakePot|steerPot+2](0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
097A: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
097C: 53 02    MOV   [lastValue|error|brakePot|steerPot+2],A(0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
097E: 40       NOP                      (0489)     nop
097F: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0981: 53 02    MOV   [lastValue|error|brakePot|steerPot+2],A(0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0983: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0985: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0986: 08       PUSH  A                  (0523)     push  A
0987: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
098A: 26 02 80 AND   [lastValue|error|brakePot|steerPot+2],0x80(0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
098D: 2E 02 20 OR    [lastValue|error|brakePot|steerPot+2],0x20(0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0990: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0527)     mov   A,[Port_2_Data_SHADE]
0992: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0994: 18       POP   A                  (0530)     pop   A
0995: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0997: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0999: 2A 02    OR    A,[lastValue|error|brakePot|steerPot+2](0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
099B: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
099D: 53 02    MOV   [lastValue|error|brakePot|steerPot+2],A(0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
099F: 40       NOP                      (0536)     NOP
09A0: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
09A2: 53 02    MOV   [lastValue|error|brakePot|steerPot+2],A(0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
09A4: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
09A6: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
09A7: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
09A8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
09AB: 26 02 80 AND   [lastValue|error|brakePot|steerPot+2],0x80(0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
09AE: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0574)     mov   A,[Port_2_Data_SHADE]
09B0: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
09B2: 26 03 F0 AND   [lastValue|error|brakePot|steerPot+3],0xF0(0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
09B5: 51 03    MOV   A,[lastValue|error|brakePot|steerPot+3](0578)     mov   A,[Port_2_DriveMode_0_SHADE]
09B7: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
09B9: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
09BB: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
09BD: 2E 02 40 OR    [lastValue|error|brakePot|steerPot+2],0x40(0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
09C0: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0584)     mov   A,[Port_2_Data_SHADE]
09C2: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
09C4: 40       NOP                      (0586)     NOP
                                        (0587) 
09C5: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
09C6: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
09C8: 2E 02 50 OR    [lastValue|error|brakePot|steerPot+2],0x50(0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
09CB: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0593)     mov   A,[Port_2_Data_SHADE]
09CD: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
09CF: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
09D0: 40       NOP                      (0597)     nop
09D1: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
09D3: 08       PUSH  A                  (0610)     push  A
09D4: 26 02 C0 AND   [lastValue|error|brakePot|steerPot+2],0xC0(0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
09D7: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0612)     mov   A,[Port_2_Data_SHADE]
09D9: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
09DB: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
09DC: 40       NOP                      (0616)     nop                                    ; fastest PSoC
09DD: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
09DE: 2E 02 50 OR    [lastValue|error|brakePot|steerPot+2],0x50(0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
09E1: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0620)     mov   A,[Port_2_Data_SHADE]
09E3: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
09E5: 40       NOP                      (0623)     nop
09E6: 40       NOP                      (0624)     nop
                                        (0625) 
09E7: 26 02 C0 AND   [lastValue|error|brakePot|steerPot+2],0xC0(0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
09EA: 51 02    MOV   A,[lastValue|error|brakePot|steerPot+2](0627)     mov   A,[Port_2_Data_SHADE]
09EC: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
09EE: 18       POP   A                  (0630)     pop   A
09EF: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
09F1: A0 04    JZ    0x09F6             (0633)     jz    .UNLOCK
09F3: 79       DEC   X                  (0634)     dec   X
09F4: BF D3    JNZ   0x09C8             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
09F6: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
09F7: 2E 03 7F OR    [lastValue|error|brakePot|steerPot+3],0x7F(0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
09FA: 51 03    MOV   A,[lastValue|error|brakePot|steerPot+3](0640)     mov   A,[Port_2_DriveMode_0_SHADE]
09FC: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
09FE: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0A00: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0A02: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0A03: 7F       RET                      (0646)     ret
0A04: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0A07: 26 03 80 AND   [lastValue|error|brakePot|steerPot+3],0x80(0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0A0A: 2E 03 7F OR    [lastValue|error|brakePot|steerPot+3],0x7F(0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0A0D: 26 04 80 AND   [lastValue|error|brakePot|steerPot+4],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0A10: 51 03    MOV   A,[lastValue|error|brakePot|steerPot+3](0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0A12: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0A14: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0A16: 51 04    MOV   A,[lastValue|error|brakePot|steerPot+4](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0A18: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0A1A: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0A1C: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0A1E: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0A20: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0A22: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0A24: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0A26: 9F 40    CALL  0x0968             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0A28: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0A2A: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0A2C: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0A2E: 9F 38    CALL  0x0968             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0A30: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0A32: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0A34: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0A36: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0A38: 9F 2E    CALL  0x0968             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0A3A: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A3C: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0A3E: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0A40: 9F 26    CALL  0x0968             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0A42: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A44: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0A46: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0A48: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0A4A: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A4C: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0A4E: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0A50: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0A52: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A54: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0A56: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0A58: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0A5A: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0A5C: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0A5E: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0A60: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0A62: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0A64: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0A66: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0A68: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0A6A: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0A6C: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0A6E: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A70: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0A72: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0A77: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0A79: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0A7A: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0A7C: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0A7D: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0A7F: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0A80: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0A82: 70 3F    AND   F,0x3F             
0A84: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0A86: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0A87: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0A89: 78       DEC   A                  (0828)     dec   A
0A8A: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0A8C: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0A95: 08       PUSH  A                  (0871)     push  A
0A96: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0A98: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0A9A: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0A9C: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0A9E: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0AA0: D0 06    JNC   0x0AA7             (0877)     jnc   .Delay50u_End
0AA2: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0AA4: 78       DEC   A                  (0880)     dec   A                              ; [4]
0AA5: BF FE    JNZ   0x0AA4             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0AA7: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0AA8: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\dualadcint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADCINT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_CNT1_ISR
                                        (0022) export _DUALADC_CNT2_ISR
                                        (0023) export _DUALADC_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_cCounter1U
                                        (0026) export  DUALADC_cCounter2U
                                        (0027) export _DUALADC_iResult1
                                        (0028) export  DUALADC_iResult1
                                        (0029) export _DUALADC_iResult2
                                        (0030) export  DUALADC_iResult2
                                        (0031) export _DUALADC_bfStatus
                                        (0032) export  DUALADC_bfStatus
                                        (0033) export  DUALADC_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_iResult1:
                                        (0044)  DUALADC_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_iResult2:
                                        (0046)  DUALADC_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_bfStatus:
                                        (0048)  DUALADC_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADCMaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADCMaxPosX4Table:
                                        (0095) IF (DUALADC_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_CNT1_ISR:
0AB7: 76 05    INC   [lastValue|error|brakePot|steerPot+5](0118)    inc [DUALADC_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom assembly code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125)    
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom assembly code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    
                                        (0130)    ;---------------------------------------------------
                                        (0131)    ; Insert a lcall to a C function below this banner
                                        (0132)    ; and un-comment the lines between these banners
                                        (0133)    ;---------------------------------------------------
                                        (0134)    
                                        (0135)    ;PRESERVE_CPU_CONTEXT
                                        (0136)    ;lcall _My_C_Function
                                        (0137)    ;RESTORE_CPU_CONTEXT
                                        (0138)    
                                        (0139)    ;---------------------------------------------------
                                        (0140)    ; Insert a lcall to a C function above this banner
                                        (0141)    ; and un-comment the lines between these banners
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;@PSoC_UserCode_END@ (Do not change this line.)
0AB9: 7E       RETI                     (0144)    reti
                                        (0145) 
                                        (0146) 
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: _DUALADC_CNT2_ISR (Counter8 Interrupt)
                                        (0149) ;
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;  Increment the upper (software) half on the counter whenever the
                                        (0153) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0154) ;  should start out at the most negative value (0xFF).
                                        (0155) ;
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;
                                        (0158) _DUALADC_CNT2_ISR:
0ABA: 76 06    INC   [lastValue|error|brakePot|steerPot+6](0159)    inc [DUALADC_cCounter2U]
                                        (0160)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert your custom assembly code below this banner
                                        (0163)    ;---------------------------------------------------
                                        (0164)    ;   NOTE: interrupt service routines must preserve
                                        (0165)    ;   the values of the A and X CPU registers.
                                        (0166)    
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; Insert your custom assembly code above this banner
                                        (0169)    ;---------------------------------------------------
                                        (0170)    
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ; Insert a lcall to a C function below this banner
                                        (0173)    ; and un-comment the lines between these banners
                                        (0174)    ;---------------------------------------------------
                                        (0175)    
                                        (0176)    ;PRESERVE_CPU_CONTEXT
                                        (0177)    ;lcall _My_C_Function
                                        (0178)    ;RESTORE_CPU_CONTEXT
                                        (0179)    
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ; Insert a lcall to a C function above this banner
                                        (0182)    ; and un-comment the lines between these banners
                                        (0183)    ;---------------------------------------------------
                                        (0184)    ;@PSoC_UserCode_END@ (Do not change this line.)
0ABC: 7E       RETI                     (0185)    reti
                                        (0186) 
                                        (0187) 
                                        (0188) ;-----------------------------------------------------------------------------
                                        (0189) ;  FUNCTION NAME: _DUALADC_PWM16_ISR  (PWM16 Interrupt)
                                        (0190) ;
                                        (0191) ;  DESCRIPTION:
                                        (0192) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0193) ;  The ADC value is calculated and stored in a global location before
                                        (0194) ;  the end of the ISR.
                                        (0195) ;
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;
                                        (0198) _DUALADC_PWM16_ISR:
0ABD: 41 23 FE AND   REG[0x23],0xFE     (0199)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE ; Disable Counter
0AC0: 41 3F FE AND   REG[0x3F],0xFE     (0200)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE ; Disable Counter
                                        (0201) IF DUALADC_NoAZ
0AC3: 43 82 20 OR    REG[0x82],0x20     (0202)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero         ; Put Integrator in AutoZero
0AC6: 43 86 20 OR    REG[0x86],0x20     (0203)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero         ; Put Integrator in AutoZero
                                        (0204) ENDIF
0AC9: 43 83 10 OR    REG[0x83],0x10     (0205)    or   reg[DUALADC_bfADC1cr3],DUALADC_fFSW0               ; Put Integrator in reset
0ACC: 43 87 10 OR    REG[0x87],0x10     (0206)    or   reg[DUALADC_bfADC2cr3],DUALADC_fFSW0               ; Put Integrator in reset
0ACF: 71 01    OR    F,0x1              
                                        (0207) 
                                        (0208)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0209)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0210)    M8C_EnableGInt
0AD1: 40       NOP                      (0211)    nop                                                     ; Wait a couple cycles
0AD2: 70 FE    AND   F,0xFE             
                                        (0212)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0AD4: 08       PUSH  A                  (0213)    push  A                                                 ; Save the Accumulator
                                        (0214) 
                                        (0215) 
                                        (0216)    ; Get ADC1 result
0AD5: 5D 20    MOV   A,REG[0x20]        (0217)    mov   A,reg[DUALADC_bCount1]                            ; Read counter value  (Bogus read puts value in Period register)
0AD7: 5D 22    MOV   A,REG[0x22]        (0218)    mov   A,reg[DUALADC_bCompare1]                          ; Read counter value
0AD9: 78       DEC   A                  (0219)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0ADA: 73       CPL   A                  (0220)    cpl   A                                                 ; Invert the value
0ADB: D0 03    JNC   0x0ADF             (0221)    jnc   DUALADC_INT_CALCV1                                ; if carry, then inc MSB as well
0ADD: 76 05    INC   [lastValue|error|brakePot|steerPot+5](0222)    inc   [DUALADC_cCounter1U]
                                        (0223) DUALADC_INT_CALCV1:
0ADF: 53 08    MOV   [lastValue|error|brakePot|steerPot+8],A(0224)    mov   [(DUALADC_iResult1 + LowByte)],A                  ; Store LSB value
0AE1: 51 05    MOV   A,[lastValue|error|brakePot|steerPot+5](0225)    mov   A, [DUALADC_cCounter1U]                           ; Store MSB from temp counter
0AE3: 53 07    MOV   [lastValue|error|brakePot|steerPot+7],A(0226)    mov   [(DUALADC_iResult1 + HighByte)],A
                                        (0227) 
                                        (0228)    ; Get ADC2 result
0AE5: 5D 3C    MOV   A,REG[0x3C]        (0229)    mov   A,reg[DUALADC_bCount2]                            ; Read counter value  (Bogus read puts value in Period register)
0AE7: 5D 3E    MOV   A,REG[0x3E]        (0230)    mov   A,reg[DUALADC_bCompare2]                          ; Read counter value
0AE9: 78       DEC   A                  (0231)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0AEA: 73       CPL   A                  (0232)    cpl   A                                                 ; Invert the value
0AEB: D0 03    JNC   0x0AEF             (0233)    jnc   DUALADC_INT_CALCV2                                ; if carry, then inc MSB as well
0AED: 76 06    INC   [lastValue|error|brakePot|steerPot+6](0234)    inc   [DUALADC_cCounter2U]
                                        (0235) DUALADC_INT_CALCV2:
0AEF: 53 0A    MOV   [lastValue|error|brakePot|steerPot+10],A(0236)    mov   [(DUALADC_iResult2 + LowByte)],A                  ; Store LSB value
0AF1: 51 06    MOV   A,[lastValue|error|brakePot|steerPot+6](0237)    mov   A, [DUALADC_cCounter2U]                           ; Store MSB from temp counter
0AF3: 53 09    MOV   [lastValue|error|brakePot|steerPot+9],A(0238)    mov   [(DUALADC_iResult2 + HighByte)],A
                                        (0239) 
                                        (0240)                                                            ; The new value has been stored,
                                        (0241)                                                            ; so get counters ready for next reading first.
0AF5: 62 21 FF MOV   REG[0x21],0xFF     (0242)    mov   reg[DUALADC_bPeriod1], ffh                        ; Initialize counter1 to FF - Set to overflow after 256 counts
0AF8: 62 3D FF MOV   REG[0x3D],0xFF     (0243)    mov   reg[DUALADC_bPeriod2], ffh                        ; Initialize counter2 to FF - Set to overflow after 256 counts
0AFB: 43 23 01 OR    REG[0x23],0x1      (0244)    or    reg[DUALADC_bCounter1_CR0],DUALADC_fDBLK_ENABLE   ; Enable Counter1
0AFE: 43 3F 01 OR    REG[0x3F],0x1      (0245)    or    reg[DUALADC_bCounter2_CR0],DUALADC_fDBLK_ENABLE   ; Enable Counter2
                                        (0246) 
                                        (0247) 
                                        (0248) IF (DUALADC_DATA_FORMAT)                                   ; Only check for Negative numbers if SIGNED result
                                        (0249)    mov   A, [DUALADC_bfStatus]                             ; Get Status with Resolution
                                        (0250)    and   A, DUALADC_bRES_MASK                              ; Mask of resolution
                                        (0251)    index DUALADCMaxNegX4Table                              ; Get Maximum negative value from table
                                        (0252)    mov   [DUALADC_cCounter1U], A                           ; Place result back into MSB of counter
                                        (0253)    mov   [DUALADC_cCounter2U], A                           ; Place result back into MSB of counter
                                        (0254) ELSE
0B01: 55 05 00 MOV   [lastValue|error|brakePot|steerPot+5],0x0(0255)    mov   [DUALADC_cCounter1U], 00h                         ; Place result back into MSB of counter
0B04: 55 06 00 MOV   [lastValue|error|brakePot|steerPot+6],0x0(0256)    mov   [DUALADC_cCounter2U], 00h                         ; Place result back into MSB of counter
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0260)    ;---------------------------------------------------
                                        (0261)    ; If the input is muxed with multiple inputs
                                        (0262)    ; this is a good place to change inputs.
                                        (0263)    ; Insert your custom code below this banner
                                        (0264)    ;---------------------------------------------------
                                        (0265)    ;   NOTE: interrupt service routines must preserve
                                        (0266)    ;   the values of the A and X CPU registers. At this
                                        (0267)    ;   point A has been preserved on the stack and will
                                        (0268)    ;   be restored before the return from interrupt.
                                        (0269)    ;   However, if you use the X register, you must
                                        (0270)    ;   preserve its value and restore it here.
                                        (0271) 
                                        (0272) 
                                        (0273)    ;---------------------------------------------------
                                        (0274)    ; Insert your custom code above this banner
                                        (0275)    ;---------------------------------------------------
                                        (0276)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0277) 
0B07: 41 83 EF AND   REG[0x83],0xEF     (0278)    and   reg[DUALADC_bfADC1cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
0B0A: 41 87 EF AND   REG[0x87],0xEF     (0279)    and   reg[DUALADC_bfADC2cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
                                        (0280) IF DUALADC_NoAZ
0B0D: 41 82 DF AND   REG[0x82],0xDF     (0281)    and   reg[DUALADC_bfADC1cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
0B10: 41 86 DF AND   REG[0x86],0xDF     (0282)    and   reg[DUALADC_bfADC2cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
                                        (0283) ENDIF
                                        (0284) 
                                        (0285) 
                                        (0286)    ;****************************************************************************
                                        (0287)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0288)    ;                          ; if stack space isn't at a premium.
                                        (0289)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0290)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0291)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0292)    ;        successful acquisition of the next byte.
                                        (0293)    ;****************************************************************************
                                        (0294) 
                                        (0295) ; ADC1
                                        (0296) IF (DUALADC_DATA_FORMAT)                         ; Only check for Negative numbers if SIGNED result
                                        (0297)                                                  ; Negative Overflow Check
                                        (0298)    tst   [(DUALADC_iResult1 + HighByte)],80h
                                        (0299)    jnz   DUALADC_NOT_2POVFL1
                                        (0300) 
                                        (0301) ENDIF
                                        (0302)                                                  ; Postive Overflow Check
                                        (0303)                                                  ; Get MSB of Max Positive value x4 + 1
0B13: 51 0B    MOV   A,[lastValue|error|brakePot|steerPot+11](0304)    mov   A,[DUALADC_bfStatus]                    ; Get Status with Resolution
0B15: 21 0F    AND   A,0xF              (0305)    and   A,DUALADC_bRES_MASK                     ; Mask of resolution normalized to 0
0B17: FF 97    INDEX 0x0AB0             (0306)    index DUALADCMaxPosX4Table                    ; Get Maximum positive value x4 + 1 from table
0B19: 08       PUSH  A                  (0307)    push  A
0B1A: 22 07    AND   A,[lastValue|error|brakePot|steerPot+7](0308)    and   A, [(DUALADC_iResult1 + HighByte)]
0B1C: A0 0B    JZ    0x0B28             (0309)    jz    DUALADC_NOT_POVFL1
                                        (0310)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0B1E: 18       POP   A                  (0311)    pop   A
0B1F: 11 01    SUB   A,0x1              (0312)    sub   A, 01h
                                        (0313)                                                  ; Force most positive * 4 into result
0B21: 53 07    MOV   [lastValue|error|brakePot|steerPot+7],A(0314)    mov   [(DUALADC_iResult1 + HighByte)], A
0B23: 55 08 FF MOV   [lastValue|error|brakePot|steerPot+8],0xFF(0315)    mov   [(DUALADC_iResult1 + LowByte)], ffh
0B26: 80 02    JMP   0x0B29             (0316)    jmp   DUALADC_NOT_2POVFL1
                                        (0317) DUALADC_NOT_POVFL1:
0B28: 18       POP   A                  (0318)    pop   A
                                        (0319) 
                                        (0320) DUALADC_NOT_2POVFL1:
0B29: 68 07    ASR   [lastValue|error|brakePot|steerPot+7](0321)    asr   [(DUALADC_iResult1 + HighByte)]         ; Shift MSB and LSB right twice to divide by four
0B2B: 6E 08    RRC   [lastValue|error|brakePot|steerPot+8](0322)    rrc   [(DUALADC_iResult1 + LowByte)]          ; Remember digital clock 4 times analog clock
0B2D: 68 07    ASR   [lastValue|error|brakePot|steerPot+7](0323)    asr   [(DUALADC_iResult1 + HighByte)]
0B2F: 6E 08    RRC   [lastValue|error|brakePot|steerPot+8](0324)    rrc   [(DUALADC_iResult1 + LowByte)]
                                        (0325) 
                                        (0326) ; ADC2
                                        (0327) IF (DUALADC_DATA_FORMAT)                         ; Only check for Negative numbers if SIGNED result
                                        (0328)                                                  ; Negative Overflow Check
                                        (0329)    tst   [(DUALADC_iResult2 + HighByte)],80h
                                        (0330)    jnz   DUALADC_NOT_2POVFL2
                                        (0331) 
                                        (0332) ENDIF
                                        (0333)                                                  ; Postive Overflow Check
                                        (0334)                                                  ; Get MSB of Max Positive value x4 + 1
0B31: 51 0B    MOV   A,[lastValue|error|brakePot|steerPot+11](0335)    mov   A,[DUALADC_bfStatus]                    ; Get Status with Resolution
0B33: 21 0F    AND   A,0xF              (0336)    and   A,DUALADC_bRES_MASK                     ; Mask of resolution normalized to 0
0B35: FF 79    INDEX 0x0AB0             (0337)    index DUALADCMaxPosX4Table                    ; Get Maximum positive value x4 + 1 from table
0B37: 08       PUSH  A                  (0338)    push  A
0B38: 22 09    AND   A,[lastValue|error|brakePot|steerPot+9](0339)    and   A, [(DUALADC_iResult2 + HighByte)]
0B3A: A0 0B    JZ    0x0B46             (0340)    jz    DUALADC_NOT_POVFL2
                                        (0341)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0B3C: 18       POP   A                  (0342)    pop   A
0B3D: 11 01    SUB   A,0x1              (0343)    sub   A, 01h
                                        (0344)                                                  ; Force most positive * 4 into result
0B3F: 53 09    MOV   [lastValue|error|brakePot|steerPot+9],A(0345)    mov   [(DUALADC_iResult2 + HighByte)], A
0B41: 55 0A FF MOV   [lastValue|error|brakePot|steerPot+10],0xFF(0346)    mov   [(DUALADC_iResult2 + LowByte)], ffh
0B44: 80 02    JMP   0x0B47             (0347)    jmp   DUALADC_NOT_2POVFL2
                                        (0348) DUALADC_NOT_POVFL2:
0B46: 18       POP   A                  (0349)    pop   A
                                        (0350) 
                                        (0351) DUALADC_NOT_2POVFL2:
0B47: 68 09    ASR   [lastValue|error|brakePot|steerPot+9](0352)    asr   [(DUALADC_iResult2 + HighByte)]         ; Shift MSB and LSB right twice to divide by four
0B49: 6E 0A    RRC   [lastValue|error|brakePot|steerPot+10](0353)    rrc   [(DUALADC_iResult2 + LowByte)]          ; Remember digital clock 4 times analog clock
0B4B: 68 09    ASR   [lastValue|error|brakePot|steerPot+9](0354)    asr   [(DUALADC_iResult2 + HighByte)]
0B4D: 6E 0A    RRC   [lastValue|error|brakePot|steerPot+10](0355)    rrc   [(DUALADC_iResult2 + LowByte)]
                                        (0356) 
                                        (0357)    ;**********************************************
                                        (0358)    ; Data is ready at this point.
                                        (0359)    ; If processing Data at Interrupt level - add
                                        (0360)    ;     User Code to handle the data
                                        (0361)    ;**********************************************
                                        (0362)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0363)    ;---------------------------------------------------
                                        (0364)    ; Insert your custom code below this banner
                                        (0365)    ;---------------------------------------------------
                                        (0366)    ;   NOTE: interrupt service routines must preserve
                                        (0367)    ;   the values of the A and X CPU registers. At this
                                        (0368)    ;   point A has been preserved on the stack and wil
                                        (0369)    ;   be restored later. However, if you use X, be
                                        (0370)    ;   sure to take care of it yourself!
                                        (0371) 
                                        (0372) 
                                        (0373)    ;---------------------------------------------------
                                        (0374)    ; Insert your custom code above this banner
                                        (0375)    ;---------------------------------------------------
                                        (0376)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0377) 
0B4F: 18       POP   A                  (0378)    pop   A                                       ; Restore A, not used any more
                                        (0379) 
0B50: 2E 0B 10 OR    [lastValue|error|brakePot|steerPot+11],0x10(0380)    or    [DUALADC_bfStatus],DUALADC_fDATA_READY  ; Set Data ready bit
                                        (0381) 
0B53: 47 0C FF TST   [lastValue|error|brakePot|steerPot+12],0xFF(0382)    tst   [DUALADC_bSampC], ffh                   ; If sample_counter == 0 -->> continuous data collection
0B56: A0 23    JZ    0x0B7A             (0383)    jz    DUALADC_END_PWM16_ISR
                                        (0384) 
0B58: 7A 0C    DEC   [lastValue|error|brakePot|steerPot+12](0385)    dec   [DUALADC_bSampC]                        ; Dec sample counter and check for zero
0B5A: B0 1F    JNZ   0x0B7A             (0386)    jnz   DUALADC_END_PWM16_ISR
                                        (0387) 
0B5C: 41 33 FE AND   REG[0x33],0xFE     (0388)    and   reg[DUALADC_fPWM_LSB_CR0], ~DUALADC_fDBLK_ENABLE      ; Disable the PWM
                                        (0389) 
0B5F: 41 23 FE AND   REG[0x23],0xFE     (0390)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
0B62: 41 3F FE AND   REG[0x3F],0xFE     (0391)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0392) 
                                        (0393) IF DUALADC_NoAZ
0B65: 43 82 20 OR    REG[0x82],0x20     (0394)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
0B68: 43 86 20 OR    REG[0x86],0x20     (0395)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
                                        (0396) ENDIF
                                        (0397) 
0B6B: 43 83 10 OR    REG[0x83],0x10     (0398)    or    reg[DUALADC_bfADC1cr3], DUALADC_fFSW0                 ; Put Integrator into reset
0B6E: 43 87 10 OR    REG[0x87],0x10     (0399)    or    reg[DUALADC_bfADC2cr3], DUALADC_fFSW0                 ; Put Integrator into reset
                                        (0400) 
0B71: 41 E1 DF AND   REG[0xE1],0xDF     (0401)    and   reg[DUALADC_bfPWM16_INT_REG], ~DUALADC_bfPWM16_Mask      ; Disable interrupts
0B74: 41 E1 FE AND   REG[0xE1],0xFE     (0402)    and   reg[DUALADC_bfCounter1_INT_REG], ~DUALADC_bfCounter1_Mask
0B77: 41 E1 7F AND   REG[0xE1],0x7F     (0403)    and   reg[DUALADC_bfCounter2_INT_REG], ~DUALADC_bfCounter2_Mask
                                        (0404) 
                                        (0405) DUALADC_END_PWM16_ISR:
0B7A: 7E       RETI                     (0406)    reti
                                        (0407) 
                                        (0408) DUALADC_APIINT_END:
FILE: lib\dualadc.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0B7B: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  DUALADC.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) include "DUALADC.inc"
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) 
                                        (0029) export  DUALADC_Start
                                        (0030) export _DUALADC_Start
                                        (0031) export  DUALADC_SetPower
                                        (0032) export _DUALADC_SetPower
                                        (0033) export  DUALADC_Stop
                                        (0034) export _DUALADC_Stop
                                        (0035) export  DUALADC_GetSamples
                                        (0036) export _DUALADC_GetSamples
                                        (0037) export  DUALADC_StopAD
                                        (0038) export _DUALADC_StopAD
                                        (0039) export  DUALADC_fIsData
                                        (0040) export _DUALADC_fIsData
                                        (0041) export  DUALADC_fIsDataAvailable
                                        (0042) export _DUALADC_fIsDataAvailable
                                        (0043) export  DUALADC_iGetData1
                                        (0044) export _DUALADC_iGetData1
                                        (0045) export  DUALADC_iGetData2
                                        (0046) export _DUALADC_iGetData2
                                        (0047) export  DUALADC_ClearFlag
                                        (0048) export _DUALADC_ClearFlag
                                        (0049) export  DUALADC_iGetData1ClearFlag
                                        (0050) export _DUALADC_iGetData1ClearFlag
                                        (0051) export  DUALADC_iGetData2ClearFlag
                                        (0052) export _DUALADC_iGetData2ClearFlag
                                        (0053) export  DUALADC_SetResolution
                                        (0054) export _DUALADC_SetResolution
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) ; Calctime parameters
                                        (0061) wCalcTime:     equ   DUALADC_bCALCTIME
                                        (0062) 
                                        (0063) ; Constants
                                        (0064) LowByte:       equ 1
                                        (0065) HighByte:      equ 0
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DUALADC_Start
                                        (0071) ;  FUNCTION NAME: DUALADC_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;  Applies power setting to the module's analog PSoc block.
                                        (0075) ;
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;
                                        (0078) ;  ARGUMENTS:
                                        (0079) ;   A  Contains power level setting 0 to 3
                                        (0080) ;
                                        (0081) ;  RETURNS:  none
                                        (0082) ;
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;          
                                        (0090) ;    Currently only the page pointer registers listed below are modified: 
                                        (0091) ;          CUR_PP
                                        (0092) ;
                                        (0093) ;  THEORY of OPERATION or PROCEDURE:
                                        (0094) ;
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096)  DUALADC_Start:
                                        (0097) _DUALADC_Start:
                                        (0098)  DUALADC_SetPower:
                                        (0099) _DUALADC_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >DUALADC_bfStatus
                                        (0103) 
0B7E: 21 03    AND   A,0x3              (0104)    and   A,DUALADC_bfPOWERMASK                       ; Mask only the valid power setting bits
0B80: 4F       MOV   X,SP               (0105)    mov   X, SP                                       ; Get location of next location on stack
0B81: 08       PUSH  A                  (0106)    push  A                                           ; Save power value on temp location
                                        (0107) 
                                        (0108)                                                      ; Set power for ADC1
0B82: 5D 83    MOV   A,REG[0x83]        (0109)    mov   A, reg[DUALADC_bfADC1cr3]                   ; Get current value of ADC1cr3
0B84: 21 FC    AND   A,0xFC             (0110)    and   A, ~DUALADC_bfPOWERMASK                     ; Mask off old power value
0B86: 2B 00    OR    A,[X+0]            (0111)    or    A, [X]                                      ; OR in new power value
0B88: 29 F0    OR    A,0xF0             (0112)    or    A, f0h                                      ; Make sure other register is set correctly
0B8A: 60 83    MOV   REG[0x83],A        (0113)    mov   reg[DUALADC_bfADC1cr3], A                   ; Reload CR with new power value
                                        (0114) 
                                        (0115)                                                      ; Set power for ADC2
0B8C: 5D 87    MOV   A,REG[0x87]        (0116)    mov   A, reg[DUALADC_bfADC2cr3]                   ; Get current value of ADC2cr3
0B8E: 21 FC    AND   A,0xFC             (0117)    and   A, ~DUALADC_bfPOWERMASK                     ; Mask off old power value
0B90: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                      ; OR in new power value
0B92: 29 F0    OR    A,0xF0             (0119)    or    A, f0h                                      ; Make sure other register is set correctly
0B94: 60 87    MOV   REG[0x87],A        (0120)    mov   reg[DUALADC_bfADC2cr3], A                   ; Reload CR with new power value
                                        (0121) 
0B96: 49 82 01 TST   REG[0x82],0x1      (0122)    tst   reg[DUALADC_bfADC1cr2], DUALADC_fRES_SET
0B99: A0 05    JZ    0x0B9F             (0123)    jz    .DoNotLoadRes
0B9B: 50 03    MOV   A,0x3              (0124)    mov   A,DUALADC_bNUMBITS - DUALADC_bMINRES                   ; get and set the resolution
0B9D: 53 0B    MOV   [lastValue|error|brakePot|steerPot+11],A(0125)    mov   [DUALADC_bfStatus], A              ; place it in the status variable
                                        (0126) .DoNotLoadRes:
                                        (0127) 
0B9F: 18       POP   A                  (0128)    pop   A                                           ; Restore the stack and power value
0BA0: 70 3F    AND   F,0x3F             
0BA2: 71 C0    OR    F,0xC0             
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0130)    RAM_EPILOGUE RAM_USE_CLASS_4
0BA4: 7F       RET                      (0131)    ret
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DUALADC_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;  Removes power from the module's analog PSoc blocks, but the digital
                                        (0140) ;  blocks keep on running.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS: None
                                        (0145) ;
                                        (0146) ;  RETURNS:   NA
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS:
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  DUALADC_Stop:
                                        (0156) _DUALADC_Stop:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
0BA5: 41 83 FC AND   REG[0x83],0xFC     (0158)    and   reg[DUALADC_bfADC1cr3], ~DUALADC_bfPOWERMASK
0BA8: 41 87 FC AND   REG[0x87],0xFC     (0159)    and   reg[DUALADC_bfADC2cr3], ~DUALADC_bfPOWERMASK
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0BAB: 7F       RET                      (0161)    ret
0BAC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: DUALADC_Get_Samples
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0170) ;  is set whenever a new data value is available.
                                        (0171) ;
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;
                                        (0174) ;  ARGUMENTS:
                                        (0175) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0176) ;     continuously.  A flag is set whenever a new data values are available.
                                        (0177) ;
                                        (0178) ;  RETURNS:  NA
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187) ;    Currently only the page pointer registers listed below are modified: 
                                        (0188) ;          CUR_PP
                                        (0189) ;
                                        (0190)  DUALADC_GetSamples:
                                        (0191) _DUALADC_GetSamples:
                                        (0192)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_SETPAGE_CUR >DUALADC_bSampC
0BAF: 53 0C    MOV   [lastValue|error|brakePot|steerPot+12],A(0194)    mov   [DUALADC_bSampC], A                               ; Store sample count
                                        (0195)                                                            ; Interrupts, Put A/D in reset
0BB1: 51 0B    MOV   A,[lastValue|error|brakePot|steerPot+11](0196)    mov   A,[DUALADC_bfStatus]                              ; get and set the resolution
0BB3: 21 0F    AND   A,0xF              (0197)    and   A,DUALADC_bRES_MASK
0BB5: 01 07    ADD   A,0x7              (0198)    add   A,DUALADC_bMINRES
0BB7: 90 8C    CALL  _DUALADC_SetResolution(0199)    call  DUALADC_SetResolution
                                        (0200) 
                                        (0201) DUALADC_LoadMSBCounter:                                    ; The PWM has been setup by SetResolution, now set the upper
                                        (0202)                                                            ; counter which will be the same as the period.
                                        (0203)                                                            ; Reset MSB of counter to most negative value
                                        (0204) 
0BB9: 5D 36    MOV   A,REG[0x36]        (0205)    mov   A,reg[DUALADC_bPWM_IntTime_MSB]                   ; Get MSB of PWM and move it into RAM
0BBB: 53 05    MOV   [lastValue|error|brakePot|steerPot+5],A(0206)    mov   [DUALADC_cCounter1U], A                           ; Use counter as temp location
0BBD: 50 00    MOV   A,0x0              (0207)    mov   A, 00h                                            ; Load A with zero for the calculation
0BBF: 12 05    SUB   A,[lastValue|error|brakePot|steerPot+5](0208)    sub   A, [DUALADC_cCounter1U]                           ; 0 - MSB_PWM = MSB_of_most_neg_value
0BC1: 67       ASR   A                  (0209)    asr   A                                                 ; Half the range (+ and -)
                                        (0210) IF (DUALADC_DATA_FORMAT)
                                        (0211)    mov   [DUALADC_cCounter1U], A                           ; Place result back into MSB of counter1
                                        (0212)    mov   [DUALADC_cCounter2U], A                           ; Place result back into MSB of counter2
                                        (0213) ELSE
0BC2: 55 05 00 MOV   [lastValue|error|brakePot|steerPot+5],0x0(0214)    mov   [DUALADC_cCounter1U], 00h                         ; Always start at zero for unsigned values for ADC1
0BC5: 55 06 00 MOV   [lastValue|error|brakePot|steerPot+6],0x0(0215)    mov   [DUALADC_cCounter2U], 00h                         ; Always start at zero for unsigned values for ADC2
                                        (0216) ENDIF
0BC8: 5D 32    MOV   A,REG[0x32]        (0217)    mov   A, reg[DUALADC_bPWM_IntTime_LSB]                  ; Dummy Read  - required do not remove
0BCA: 62 21 FF MOV   REG[0x21],0xFF     (0218)    mov   reg[DUALADC_bPeriod1], FFh                        ; Make sure counter1 starts at FF
0BCD: 62 3D FF MOV   REG[0x3D],0xFF     (0219)    mov   reg[DUALADC_bPeriod2], FFh                        ; Make sure counter2 starts at FF
                                        (0220) 
0BD0: 41 83 EF AND   REG[0x83],0xEF     (0221)    and   reg[DUALADC_bfADC1cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
0BD3: 41 87 EF AND   REG[0x87],0xEF     (0222)    and   reg[DUALADC_bfADC2cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
                                        (0223) IF DUALADC_NoAZ
0BD6: 41 82 DF AND   REG[0x82],0xDF     (0224)     and  reg[DUALADC_bfADC1cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
0BD9: 41 86 DF AND   REG[0x86],0xDF     (0225)     and  reg[DUALADC_bfADC2cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
                                        (0226) ENDIF
                                        (0227) 
0BDC: 43 23 05 OR    REG[0x23],0x5      (0228)    or    reg[DUALADC_bCounter1_CR0], (DUALADC_fDBLK_ENABLE|DUALADC_fPULSE_WIDE)   ; Enable the Counter
0BDF: 43 3F 05 OR    REG[0x3F],0x5      (0229)    or    reg[DUALADC_bCounter2_CR0], (DUALADC_fDBLK_ENABLE|DUALADC_fPULSE_WIDE)   ; Enable the Counter
0BE2: 43 33 01 OR    REG[0x33],0x1      (0230)    or    reg[DUALADC_fPWM_LSB_CR0], DUALADC_fDBLK_ENABLE          ; Enable PWM
0BE5: 43 E1 20 OR    REG[0xE1],0x20     (0231)    or    reg[DUALADC_bfPWM16_INT_REG], DUALADC_bfPWM16_Mask    ; Enable PWM and Counter interrupts
0BE8: 43 E1 01 OR    REG[0xE1],0x1      (0232)    or    reg[DUALADC_bfCounter1_INT_REG], DUALADC_bfCounter1_Mask
0BEB: 43 E1 80 OR    REG[0xE1],0x80     (0233)    or    reg[DUALADC_bfCounter2_INT_REG], DUALADC_bfCounter2_Mask
                                        (0234) 
0BEE: 7F       RET                      (0235)    ret
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) .SECTION
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;  FUNCTION NAME: DUALADC_StopAD
                                        (0242) ;
                                        (0243) ;  DESCRIPTION:
                                        (0244) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0245) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS:  None
                                        (0250) ;
                                        (0251) ;  RETURNS: NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;     The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  DUALADC_StopAD:
                                        (0261) _DUALADC_StopAD:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
0BEF: 41 33 FE AND   REG[0x33],0xFE     (0263)    and   reg[DUALADC_fPWM_LSB_CR0], ~DUALADC_fDBLK_ENABLE      ; Disable the PWM
                                        (0264) 
0BF2: 41 23 FE AND   REG[0x23],0xFE     (0265)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
0BF5: 41 3F FE AND   REG[0x3F],0xFE     (0266)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0267) 
                                        (0268) IF DUALADC_NoAZ
0BF8: 43 82 20 OR    REG[0x82],0x20     (0269)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
0BFB: 43 86 20 OR    REG[0x86],0x20     (0270)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
                                        (0271) ENDIF
                                        (0272) 
0BFE: 43 83 10 OR    REG[0x83],0x10     (0273)    or   reg[DUALADC_bfADC1cr3], DUALADC_fFSW0                  ; Put Integrator into reset
0C01: 43 87 10 OR    REG[0x87],0x10     (0274)    or   reg[DUALADC_bfADC2cr3], DUALADC_fFSW0                  ; Put Integrator into reset
                                        (0275) 
0C04: 08       PUSH  A                  (0276)    push A
0C05: 41 E1 DF AND   REG[0xE1],0xDF     
0C08: 41 E1 FE AND   REG[0xE1],0xFE     
0C0B: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0277)    M8C_DisableIntMask DUALADC_bfPWM16_INT_REG, DUALADC_bfPWM16_Mask      ; Disable interrupts
                                        (0278)    M8C_DisableIntMask DUALADC_bfCounter1_INT_REG, DUALADC_bfCounter1_Mask
                                        (0279)    M8C_DisableIntMask DUALADC_bfCounter2_INT_REG, DUALADC_bfCounter1_Mask
0C0E: 18       POP   A                  (0280)    pop  A
                                        (0281)    
                                        (0282)    RAM_EPILOGUE RAM_USE_CLASS_1
0C0F: 7F       RET                      (0283)    ret
0C10: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0284) .ENDSECTION
                                        (0285) 
                                        (0286) .SECTION
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  FUNCTION NAME: DUALADC_fIsData
                                        (0289) ;  FUNCTION NAME: DUALADC_fIsDataAvailable
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0293) ;  value is available.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: None
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;  A  Returns data status  A == 0 no data available
                                        (0301) ;                          A != 0 data available
                                        (0302) ;
                                        (0303) ;  SIDE EFFECTS:
                                        (0304) ;    The A and X registers may be modified by this or future implementations
                                        (0305) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0306) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0307) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0308) ;    functions.
                                        (0309) ;          
                                        (0310) ;    Currently only the page pointer registers listed below are modified:
                                        (0311) ;          CUR_PP
                                        (0312) ;
                                        (0313)  DUALADC_fIsData:
                                        (0314) _DUALADC_fIsData:
                                        (0315)  DUALADC_fIsDataAvailable:
                                        (0316) _DUALADC_fIsDataAvailable:
                                        (0317)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0318)    RAM_SETPAGE_CUR >DUALADC_bfStatus
0C13: 51 0B    MOV   A,[lastValue|error|brakePot|steerPot+11](0319)    mov   A, [DUALADC_bfStatus]                        ; Get status byte
0C15: 21 10    AND   A,0x10             (0320)    and   A, DUALADC_fDATA_READY                       ; Mask off other bits
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_4
0C17: 7F       RET                      (0322)    ret
0C18: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0323) .ENDSECTION
                                        (0324) 
                                        (0325) .SECTION
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327) ;  FUNCTION NAME: DUALADC_iGetData1ClearFlag
                                        (0328) ;  FUNCTION NAME: DUALADC_iGetData1
                                        (0329) ;
                                        (0330) ;  DESCRIPTION:
                                        (0331) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0332) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: None
                                        (0337) ;
                                        (0338) ;  RETURNS:
                                        (0339) ;    A  Contains the LSB of the 16 bit result
                                        (0340) ;    X  Contains the MSB of the 16 bit result
                                        (0341) ;
                                        (0342) ;  SIDE EFFECTS:
                                        (0343) ;    The A and X registers may be modified by this or future implementations
                                        (0344) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0345) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0346) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0347) ;    functions.
                                        (0348) ;          
                                        (0349) ;    Currently only the page pointer registers listed below are modified:
                                        (0350) ;          CUR_PP
                                        (0351) ;
                                        (0352)  DUALADC_iGetData1ClearFlag:
                                        (0353) _DUALADC_iGetData1ClearFlag:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    RAM_SETPAGE_CUR >DUALADC_iResult1 
0C1B: 26 0B EF AND   [lastValue|error|brakePot|steerPot+11],0xEF(0356)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
0C1E: 58 07    MOV   X,[lastValue|error|brakePot|steerPot+7](0357)    mov   X, [(DUALADC_iResult1 + HighByte)]
0C20: 51 08    MOV   A,[lastValue|error|brakePot|steerPot+8](0358)    mov   A, [(DUALADC_iResult1 + LowByte)]
                                        (0359)    RAM_EPILOGUE RAM_USE_CLASS_4
0C22: 7F       RET                      (0360)    ret
0C23: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0361) 
                                        (0362)  DUALADC_iGetData1:
                                        (0363) _DUALADC_iGetData1:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >DUALADC_iResult1  
0C26: 58 07    MOV   X,[lastValue|error|brakePot|steerPot+7](0366)    mov   X, [(DUALADC_iResult1 + HighByte)]
0C28: 51 08    MOV   A,[lastValue|error|brakePot|steerPot+8](0367)    mov   A, [(DUALADC_iResult1 + LowByte)]
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0C2A: 7F       RET                      (0369)    ret
0C2B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DUALADC_iGetData2ClearFlag
                                        (0375) ;  FUNCTION NAME: DUALADC_iGetData2
                                        (0376) ;
                                        (0377) ;  DESCRIPTION:
                                        (0378) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0379) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0380) ;
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;
                                        (0383) ;  ARGUMENTS: None
                                        (0384) ;
                                        (0385) ;  RETURNS:
                                        (0386) ;    A  Contains the LSB of the 16 bit result
                                        (0387) ;    X  Contains the MSB of the 16 bit result
                                        (0388) ;
                                        (0389) ;  SIDE EFFECTS:
                                        (0390) ;    The A and X registers may be modified by this or future implementations
                                        (0391) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0392) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0393) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0394) ;    functions.
                                        (0395) ;          
                                        (0396) ;    Currently only the page pointer registers listed below are modified:
                                        (0397) ;          CUR_PP
                                        (0398) ;
                                        (0399)  DUALADC_iGetData2ClearFlag:
                                        (0400) _DUALADC_iGetData2ClearFlag:
                                        (0401)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0402)    RAM_SETPAGE_CUR >DUALADC_iResult1  
0C2E: 26 0B EF AND   [lastValue|error|brakePot|steerPot+11],0xEF(0403)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
0C31: 58 09    MOV   X,[lastValue|error|brakePot|steerPot+9](0404)    mov   X, [(DUALADC_iResult2 + HighByte)]
0C33: 51 0A    MOV   A,[lastValue|error|brakePot|steerPot+10](0405)    mov   A, [(DUALADC_iResult2 + LowByte)]
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_4
0C35: 7F       RET                      (0407)    ret
0C36: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0408) 
                                        (0409)  DUALADC_iGetData2:
                                        (0410) _DUALADC_iGetData2:
                                        (0411)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0412)    RAM_SETPAGE_CUR >DUALADC_iResult1  
0C39: 58 09    MOV   X,[lastValue|error|brakePot|steerPot+9](0413)    mov   X, [(DUALADC_iResult2 + HighByte)]
0C3B: 51 0A    MOV   A,[lastValue|error|brakePot|steerPot+10](0414)    mov   A, [(DUALADC_iResult2 + LowByte)]
                                        (0415)    RAM_EPILOGUE RAM_USE_CLASS_4
0C3D: 7F       RET                      (0416)    ret
0C3E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) .SECTION
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: DUALADC_ClearFlag
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:
                                        (0424) ;  Clears the data ready flag.
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427) ;
                                        (0428) ;  ARGUMENTS: None
                                        (0429) ;
                                        (0430) ;  RETURNS: NA
                                        (0431) ;
                                        (0432) ;  SIDE EFFECTS:
                                        (0433) ;    The A and X registers may be modified by this or future implementations
                                        (0434) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0435) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0436) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0437) ;    functions.
                                        (0438) ;          
                                        (0439) ;    Currently only the page pointer registers listed below are modified:
                                        (0440) ;          CUR_PP
                                        (0441) ;
                                        (0442)  DUALADC_ClearFlag:
                                        (0443) _DUALADC_ClearFlag:
                                        (0444)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0445)    RAM_SETPAGE_CUR >DUALADC_bfStatus  
0C41: 26 0B EF AND   [lastValue|error|brakePot|steerPot+11],0xEF(0446)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
                                        (0447)    RAM_EPILOGUE RAM_USE_CLASS_4
0C44: 7F       RET                      (0448)    ret
0C45: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: DUALADC_SetResolution
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0462) ;
                                        (0463) ;  RETURNS:  NA
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0476) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0477) ;    should be called. It sets the resolution for both channels at the
                                        (0478) ;    same time.
                                        (0479) ;
                                        (0480)  DUALADC_SetResolution:
                                        (0481) _DUALADC_SetResolution:
                                        (0482)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0483)    RAM_SETPAGE_CUR >DUALADC_bfStatus  
                                        (0484) 
0C48: 41 82 FE AND   REG[0x82],0xFE     (0485)    and   reg[DUALADC_bfADC1cr2], ~DUALADC_fRES_SET
                                        (0486)    
0C4B: 9F A2    CALL  _DUALADC_StopAD    (0487)    call  DUALADC_StopAD                            ; Stop the A/D if it is running
0C4D: 55 0B 00 MOV   [lastValue|error|brakePot|steerPot+11],0x0(0488)    mov   [DUALADC_bfStatus], 00h                   ; and clear status and old resolution
                                        (0489) 
                                        (0490)                                                    ; Check for resolution to be within min and max values
0C50: 39 07    CMP   A,0x7              (0491)    cmp   A,DUALADC_bMINRES                         ; Check low end of resolution
0C52: D0 05    JNC   0x0C58             (0492)    jnc   DUALADC_CHECKHI
0C54: 50 07    MOV   A,0x7              (0493)    mov   A,DUALADC_bMINRES                         ; Too low - load legal low value
0C56: 80 07    JMP   0x0C5E             (0494)    jmp   DUALADC_RES_OK
                                        (0495) 
                                        (0496) DUALADC_CHECKHI:                                   ; Check high end of resolution
0C58: 39 0D    CMP   A,0xD              (0497)    cmp   A,DUALADC_bMAXRES
0C5A: C0 03    JC    0x0C5E             (0498)    jc    DUALADC_RES_OK
0C5C: 50 0D    MOV   A,0xD              (0499)    mov   A,DUALADC_bMAXRES                         ; Too high - load legal Max value
                                        (0500) 
                                        (0501) DUALADC_RES_OK:
                                        (0502)                                                    ; Calculate compare value for the PWM which
                                        (0503)                                                    ; computes the integrate time
0C5E: 11 07    SUB   A,0x7              (0504)    sub   A, DUALADC_bMINRES                        ; Normalize with min resolution
0C60: 2C 0B    OR    [lastValue|error|brakePot|steerPot+11],A(0505)    or    [DUALADC_bfStatus], A
                                        (0506)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0507)                                                    ; is running 4x so 128*4=512 or 0x0200
0C62: 01 01    ADD   A,0x1              (0508)    add   A,01h                                     ; The MSB is 02h.
0C64: 5C       MOV   X,A                (0509)    mov   X,A
0C65: 50 01    MOV   A,0x1              (0510)    mov   A,01h
                                        (0511) 
                                        (0512) DUALADC_CALC_INTTIME:                              ; Now shift the MSB left for every bit of resolution of min (7).
0C67: 64       ASL   A                  (0513)    asl   A
0C68: 79       DEC   X                  (0514)    dec   X
0C69: BF FD    JNZ   0x0C67             (0515)    jnz   DUALADC_CALC_INTTIME
                                        (0516) 
                                        (0517) DUALADC_LOAD_INTTIME:                              ; Load compare value and Calc time into registers
                                        (0518)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0C6B: 62 32 00 MOV   REG[0x32],0x0      (0519)    mov   reg[DUALADC_bPWM_IntTime_LSB], 00h
0C6E: 60 36    MOV   REG[0x36],A        (0520)    mov   reg[DUALADC_bPWM_IntTime_MSB], A
                                        (0521) 
                                        (0522)                                                    ; Load the CalcTime into the PWM Period
0C70: 62 31 01 MOV   REG[0x31],0x1      (0523)    mov   reg[DUALADC_bPWM_Period_LSB], <wCalcTime
0C73: 01 00    ADD   A,0x0              (0524)    add   A, >wCalcTime
0C75: 60 35    MOV   REG[0x35],A        (0525)    mov   reg[DUALADC_bPWM_Period_MSB],A
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_4
0C77: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) ; End of File DUALADC.asm
FILE: lib\actuator_pot.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   Actuator_Pot.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "Actuator_Pot.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  Actuator_Pot_Start
                                        (0060) export _Actuator_Pot_Start
                                        (0061) export  Actuator_Pot_SetPower
                                        (0062) export _Actuator_Pot_SetPower
                                        (0063) 
                                        (0064) export  Actuator_Pot_SetGain
                                        (0065) export _Actuator_Pot_SetGain
                                        (0066) 
                                        (0067) export  Actuator_Pot_Stop
                                        (0068) export _Actuator_Pot_Stop
                                        (0069) 
                                        (0070) IF (Actuator_Pot_AGNDBUFAPI)
                                        (0071) export  Actuator_Pot_EnableAGNDBuffer
                                        (0072) export _Actuator_Pot_EnableAGNDBuffer
                                        (0073) export  Actuator_Pot_DisableAGNDBuffer
                                        (0074) export _Actuator_Pot_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: Actuator_Pot_Start
                                        (0092) ;  FUNCTION NAME: Actuator_Pot_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  Actuator_Pot_Start:
                                        (0111) _Actuator_Pot_Start:
                                        (0112)  Actuator_Pot_SetPower:
                                        (0113) _Actuator_Pot_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0C78: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0C7A: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0C7B: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0C7C: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[Actuator_Pot_GAIN_CR2]                      ; read power value
0C7E: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0C80: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0C82: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[Actuator_Pot_GAIN_CR2], A                 ; move complete value back to register
0C84: 18       POP   A                  (0124)    pop  A
0C85: 70 3F    AND   F,0x3F             
0C87: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0C89: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: Actuator_Pot_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Actuator_Pot_SetGain:
                                        (0154) _Actuator_Pot_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0C8A: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0C8C: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0C8D: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0C8E: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[Actuator_Pot_GAIN_CR0]                      ; read mux settings
0C90: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0C92: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0C95: B0 0E    JNZ   0x0CA4             (0164)    jnz  .SETHIGHGAIN
0C97: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[Actuator_Pot_GAIN_CR3],~EXGAIN                 ; Clear High Gain bit.
0C9A: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0C9C: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[Actuator_Pot_GAIN_CR0], A                      ; move complete value back to register
0C9E: 18       POP   A                  (0168)    pop  A
0C9F: 70 3F    AND   F,0x3F             
0CA1: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0CA3: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0CA4: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0CA7: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0CA9: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[Actuator_Pot_GAIN_CR0], A                      ; move complete value back to register
0CAB: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[Actuator_Pot_GAIN_CR3], EXGAIN                 ; Set High Gain bit.
0CAE: 18       POP   A                  (0177)    pop  A
0CAF: 70 3F    AND   F,0x3F             
0CB1: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0CB3: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: Actuator_Pot_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  Actuator_Pot_Stop:
                                        (0203) _Actuator_Pot_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0CB4: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[Actuator_Pot_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0CB7: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (Actuator_Pot_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: Actuator_Pot_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  Actuator_Pot_EnableAGNDBuffer:
                                        (0233) _Actuator_Pot_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[Actuator_Pot_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: Actuator_Pot_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  Actuator_Pot_DisableAGNDBuffer:
                                        (0261) _Actuator_Pot_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[Actuator_Pot_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File Actuator_Pot.asm
FILE: C:\Users\zaander\Golfcart\PSOC_P~1\PSOC_S~1\PSOC_S~1\PSOC_S~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "PSoCGPIOINT.h"
(0008) #include <string.h>
(0009) #include <stdlib.h>	
(0010) 
(0011) #pragma interrupt_handler PSoC_GPIO_ISR_C
(0012) 
(0013) #define POT_LEFT_BOUND 0x00FF
(0014) #define STEER_POT_CENTER 0x204
(0015) #define POT_RIGHT_BOUND 0x02EF
(0016) 
(0017) #define ENCODER_LEFT_BOUND -2300
(0018) #define ENCODER_RIGHT_BOUND 2300
(0019) 
(0020) #define BRAKE_MAX_POS 900
(0021) #define BRAKE_MIN_POS 100
(0022) 
(0023) #define STOP 0
(0024) 
(0025) #define BAUD_BYTE 0xAA
(0026) 
(0027) #define STEER_CTL 128
(0028) #define STEER_SPEED 80
(0029) #define LEFT 0
(0030) #define RIGHT 1
(0031) 
(0032) #define BRAKE_CTL 130
(0033) #define BRAKE_SPEED 120
(0034) #define RELEASE 0
(0035) #define APPLY 1
(0036) 
(0037) 
(0038) /******** PROTOTYPES ********/
(0039) 
(0040) // Get the ADC values of the appropriate sensor. Values will be cached until cacheValid is reset
(0041) unsigned int getBrakePosition(void);
(0042) unsigned int getSteerPotPosition(void);
(0043) 
(0044) // Tells the specified motor controller to run at the specfied speed. The
(0045) // controller will continue to run until it is explicity stopped. setControllerSpeed
(0046) // will cache the last parameters sent to each motor and only update the motor
(0047) // controller if the values have changed.
(0048) // Speed must be in the range [0, 127]
(0049) // dir is either a 0 or 1
(0050) void setControllerSpeed(BYTE addr, BYTE speed, BYTE dir);
(0051) 
(0052) // Set the current turn and brake setpoints. Both are clamped between the appropriate defines
(0053) void turn(int count);
(0054) void brake(int pVal);
(0055) 
(0056) // Stops all motors. This does not mean the brake will be applied.
(0057) void stop(void);
(0058) 
(0059) // Update the motor controller speeds based on the current setpoints
(0060) void updateBrakeCtl(void);
(0061) void updateTurnCtl(void);
(0062) 
(0063) // Realign the steer encoder so that 0 counts occurs when the pot is centered
(0064) void calibrateSteering(void);
(0065) 
(0066) int command_lookup(BYTE cmd);
(0067) 
(0068) int min(int, int);
(0069) int max(int, int);
(0070) int min(int a, int b) { return a < b ? a : b; }
__UserModules_end|_min|__text_start|_min:
  b                    --> X-7
  a                    --> X-5
    0CB8: 10       PUSH  X
    0CB9: 4F       MOV   X,SP
    0CBA: 38 02    ADD   SP,0x2
    0CBC: 52 FC    MOV   A,[X-4]
    0CBE: 13 FA    SUB   A,[X-6]
    0CC0: 52 F9    MOV   A,[X-7]
    0CC2: 31 80    XOR   A,0x80
    0CC4: 62 D0 00 MOV   REG[0xD0],0x0
    0CC7: 53 2F    MOV   [__rX],A
    0CC9: 52 FB    MOV   A,[X-5]
    0CCB: 31 80    XOR   A,0x80
    0CCD: 1A 2F    SBB   A,[__rX]
    0CCF: D0 0B    JNC   0x0CDB
    0CD1: 52 FC    MOV   A,[X-4]
    0CD3: 54 01    MOV   [X+1],A
    0CD5: 52 FB    MOV   A,[X-5]
    0CD7: 54 00    MOV   [X+0],A
    0CD9: 80 09    JMP   0x0CE3
    0CDB: 52 FA    MOV   A,[X-6]
    0CDD: 54 01    MOV   [X+1],A
    0CDF: 52 F9    MOV   A,[X-7]
    0CE1: 54 00    MOV   [X+0],A
    0CE3: 62 D0 00 MOV   REG[0xD0],0x0
    0CE6: 52 01    MOV   A,[X+1]
    0CE8: 53 34    MOV   [__r1],A
    0CEA: 52 00    MOV   A,[X+0]
    0CEC: 53 35    MOV   [__r0],A
    0CEE: 38 FE    ADD   SP,0xFE
    0CF0: 20       POP   X
    0CF1: 7F       RET   
(0071) int max(int a, int b) { return a > b ? a : b; }
_max:
  b                    --> X-7
  a                    --> X-5
    0CF2: 10       PUSH  X
    0CF3: 4F       MOV   X,SP
    0CF4: 38 02    ADD   SP,0x2
    0CF6: 52 FA    MOV   A,[X-6]
    0CF8: 13 FC    SUB   A,[X-4]
    0CFA: 52 FB    MOV   A,[X-5]
    0CFC: 31 80    XOR   A,0x80
    0CFE: 62 D0 00 MOV   REG[0xD0],0x0
    0D01: 53 2F    MOV   [__rX],A
    0D03: 52 F9    MOV   A,[X-7]
    0D05: 31 80    XOR   A,0x80
    0D07: 1A 2F    SBB   A,[__rX]
    0D09: D0 0B    JNC   0x0D15
    0D0B: 52 FC    MOV   A,[X-4]
    0D0D: 54 01    MOV   [X+1],A
    0D0F: 52 FB    MOV   A,[X-5]
    0D11: 54 00    MOV   [X+0],A
    0D13: 80 09    JMP   0x0D1D
    0D15: 52 FA    MOV   A,[X-6]
    0D17: 54 01    MOV   [X+1],A
    0D19: 52 F9    MOV   A,[X-7]
    0D1B: 54 00    MOV   [X+0],A
    0D1D: 62 D0 00 MOV   REG[0xD0],0x0
    0D20: 52 01    MOV   A,[X+1]
    0D22: 53 34    MOV   [__r1],A
    0D24: 52 00    MOV   A,[X+0]
    0D26: 53 35    MOV   [__r0],A
    0D28: 38 FE    ADD   SP,0xFE
    0D2A: 20       POP   X
    0D2B: 7F       RET   
(0072) 
(0073) 
(0074) /******** GLOBALS ********/
(0075) 
(0076) // Encoder state variables
(0077) BYTE prevPrt;
(0078) BYTE curPrt;
(0079) 
(0080) // Are currently cached analog reads valid, or should they be reaquired
(0081) BYTE cacheValid;
(0082) 
(0083) // The current count of the quadrature encoder connected to the steering column
(0084) int steerCount;
(0085) 
(0086) // The current target positions for both motor controllers
(0087) int brakeSetpoint;
(0088) int steerSetpoint;
(0089) 
(0090) 
(0091) /******** MAIN ********/
(0092) 
(0093) void main(void)
(0094) {
_main:
  data                 --> X+2
  heartbeat            --> X+0
    0D2C: 10       PUSH  X
    0D2D: 4F       MOV   X,SP
    0D2E: 38 04    ADD   SP,0x4
(0095) 	char* data;
(0096) 	
(0097) 	unsigned int heartbeat = 0;
    0D30: 56 01 00 MOV   [X+1],0x0
    0D33: 56 00 00 MOV   [X+0],0x0
(0098) 	
(0099) 	M8C_EnableGInt ; 
    0D36: 71 01    OR    F,0x1
(0100) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); 	// Enable GPIO Interrupts (see m8c.h)
    0D38: 43 E0 20 OR    REG[0xE0],0x20
(0101) 	
(0102) 	UART_CmdReset();
    0D3B: 10       PUSH  X
    0D3C: 7C 07 41 LCALL _UART_CmdReset
(0103) 	UART_IntCntl(UART_ENABLE_RX_INT);
    0D3F: 50 01    MOV   A,0x1
    0D41: 7C 06 3E LCALL _UART_IntCntl
(0104) 	UART_Start(UART_PARITY_NONE);
    0D44: 50 00    MOV   A,0x0
    0D46: 7C 06 0F LCALL _UART_Start
(0105) 	
(0106) 	TX8_Start(TX8_PARITY_NONE);
    0D49: 50 00    MOV   A,0x0
    0D4B: 7C 07 F4 LCALL _TX8_Start
(0107) 	TX8_EnableInt();
    0D4E: 7C 07 DA LCALL _TX8_EnableInt
(0108) 	Actuator_Pot_Start(Actuator_Pot_HIGHPOWER);
    0D51: 50 03    MOV   A,0x3
    0D53: 7C 0C 78 LCALL _Actuator_Pot_SetPower|Actuator_Pot_Start|_Actuator_Pot_Start|Actuator_Pot_SetPower
(0109) 	Steer_Pot_Start(Steer_Pot_HIGHPOWER);
    0D56: 50 03    MOV   A,0x3
    0D58: 7C 08 B2 LCALL _Steer_Pot_Start|Steer_Pot_SetPower|Steer_Pot_Start|_Steer_Pot_SetPower
(0110) 	DUALADC_Start(DUALADC_HIGHPOWER);
    0D5B: 50 03    MOV   A,0x3
    0D5D: 7C 0B 7B LCALL _DUALADC_Start|_DUALADC_SetPower|DUALADC_Start|DUALADC_SetPower
(0111) 	
(0112) 	LCD_Start();
    0D60: 7C 0A 04 LCALL LCD_Init|LCD_Start|_LCD_Init|_LCD_Start
(0113) 	LCD_Position(0,0);
    0D63: 50 00    MOV   A,0x0
    0D65: 57 00    MOV   X,0x0
    0D67: 7C 0A 77 LCALL _LCD_Position
(0114) 	LCD_PrCString("Steering PSoC");
    0D6A: 50 02    MOV   A,0x2
    0D6C: 08       PUSH  A
    0D6D: 50 11    MOV   A,0x11
    0D6F: 5C       MOV   X,A
    0D70: 18       POP   A
    0D71: 7C 08 F2 LCALL _LCD_PrCString
(0115) 	
(0116) 	UART_CPutString("Steer Program Start\r\n");
    0D74: 50 01    MOV   A,0x1
    0D76: 08       PUSH  A
    0D77: 50 FB    MOV   A,0xFB
    0D79: 5C       MOV   X,A
    0D7A: 18       POP   A
    0D7B: 7C 07 26 LCALL _UART_CPutString
    0D7E: 20       POP   X
    0D7F: 80 D8    JMP   0x0E58
(0117) 	//TX8_PutChar(baudChar);
(0118) 	//DAC8_1_Start(DAC8_1_HIGHPOWER);
(0119) 	//DAC8_1_WriteBlind(val);
(0120) 		
(0121) 	while (TRUE)
(0122) 	{
(0123) 		cacheValid = FALSE;
    0D81: 62 D0 00 MOV   REG[0xD0],0x0
    0D84: 55 44 00 MOV   [cacheValid],0x0
(0124) 		
(0125) 		prevPrt = (PRT1DR & (OpEncA_MASK | OpEncB_MASK)); 
    0D87: 5D 04    MOV   A,REG[0x4]
    0D89: 21 30    AND   A,0x30
    0D8B: 62 D0 00 MOV   REG[0xD0],0x0
    0D8E: 53 46    MOV   [prevPrt],A
(0126) 		
(0127) 		if(heartbeat % 500 == 0)
    0D90: 62 D0 00 MOV   REG[0xD0],0x0
    0D93: 50 01    MOV   A,0x1
    0D95: 08       PUSH  A
    0D96: 50 F4    MOV   A,0xF4
    0D98: 08       PUSH  A
    0D99: 52 00    MOV   A,[X+0]
    0D9B: 08       PUSH  A
    0D9C: 52 01    MOV   A,[X+1]
    0D9E: 08       PUSH  A
    0D9F: 7C 14 17 LCALL 0x1417
    0DA2: 38 FE    ADD   SP,0xFE
    0DA4: 18       POP   A
    0DA5: 53 34    MOV   [__r1],A
    0DA7: 18       POP   A
    0DA8: 39 00    CMP   A,0x0
    0DAA: B0 18    JNZ   0x0DC3
    0DAC: 3C 34 00 CMP   [__r1],0x0
    0DAF: B0 13    JNZ   0x0DC3
(0128) 		{
(0129) 			UART_PutCRLF();
    0DB1: 10       PUSH  X
    0DB2: 7C 07 38 LCALL _UART_PutCRLF
(0130) 			UART_CPutString("ping");
    0DB5: 50 01    MOV   A,0x1
    0DB7: 08       PUSH  A
    0DB8: 50 F6    MOV   A,0xF6
    0DBA: 5C       MOV   X,A
    0DBB: 18       POP   A
    0DBC: 7C 07 26 LCALL _UART_CPutString
(0131) 			UART_PutCRLF();
    0DBF: 7C 07 38 LCALL _UART_PutCRLF
    0DC2: 20       POP   X
(0132) 		}
(0133) 		heartbeat++;
    0DC3: 77 01    INC   [X+1]
    0DC5: 0F 00 00 ADC   [X+0],0x0
(0134) 		
(0135) 		// If the e-stop line is low
(0136) 		if (!(PRT1DR & ESTOP_MASK)){
    0DC8: 5D 04    MOV   A,REG[0x4]
    0DCA: 62 D0 00 MOV   REG[0xD0],0x0
    0DCD: 53 35    MOV   [__r0],A
    0DCF: 47 35 04 TST   [__r0],0x4
    0DD2: B0 40    JNZ   0x0E13
(0137) 			UART_CPutString("ESTOP");
    0DD4: 10       PUSH  X
    0DD5: 50 01    MOV   A,0x1
    0DD7: 08       PUSH  A
    0DD8: 50 F0    MOV   A,0xF0
    0DDA: 5C       MOV   X,A
    0DDB: 18       POP   A
    0DDC: 7C 07 26 LCALL _UART_CPutString
(0138) 			UART_PutCRLF();
    0DDF: 7C 07 38 LCALL _UART_PutCRLF
    0DE2: 20       POP   X
(0139) 			
(0140) 			stop();
    0DE3: 93 55    CALL  _stop
(0141) 			LCD_Position(0,0);
    0DE5: 10       PUSH  X
    0DE6: 50 00    MOV   A,0x0
    0DE8: 57 00    MOV   X,0x0
    0DEA: 7C 0A 77 LCALL _LCD_Position
(0142) 			LCD_PrCString("E-STOP");
    0DED: 50 01    MOV   A,0x1
    0DEF: 08       PUSH  A
    0DF0: 50 E9    MOV   A,0xE9
    0DF2: 5C       MOV   X,A
    0DF3: 18       POP   A
    0DF4: 7C 08 F2 LCALL _LCD_PrCString
    0DF7: 20       POP   X
(0143) 			
(0144) 			while (!(PRT1DR & ESTOP_MASK));
    0DF8: 5D 04    MOV   A,REG[0x4]
    0DFA: 62 D0 00 MOV   REG[0xD0],0x0
    0DFD: 53 35    MOV   [__r0],A
    0DFF: 47 35 04 TST   [__r0],0x4
    0E02: AF F5    JZ    0x0DF8
(0145) 			UART_CPutString("RESUME");
    0E04: 10       PUSH  X
    0E05: 50 01    MOV   A,0x1
    0E07: 08       PUSH  A
    0E08: 50 E2    MOV   A,0xE2
    0E0A: 5C       MOV   X,A
    0E0B: 18       POP   A
    0E0C: 7C 07 26 LCALL _UART_CPutString
(0146) 			UART_PutCRLF();
    0E0F: 7C 07 38 LCALL _UART_PutCRLF
    0E12: 20       POP   X
(0147) 		}
(0148) 		
(0149) 		updateBrakeCtl();
    0E13: 93 3A    CALL  _updateBrakeCtl
(0150) 		updateTurnCtl();
    0E15: 93 BD    CALL  _updateTurnCtl
(0151) 
(0152) 		if(UART_bCmdCheck()) 
    0E17: 10       PUSH  X
    0E18: 7C 07 57 LCALL _UART_bCmdCheck
    0E1B: 20       POP   X
    0E1C: 62 D0 00 MOV   REG[0xD0],0x0
    0E1F: 39 00    CMP   A,0x0
    0E21: A0 36    JZ    0x0E58
(0153) 		{
(0154) 			// Wait for command    
(0155) 			if(data = UART_szGetParam()) 
    0E23: 10       PUSH  X
    0E24: 7C 07 70 LCALL _UART_szGetParam
    0E27: 62 D0 00 MOV   REG[0xD0],0x0
    0E2A: 53 35    MOV   [__r0],A
    0E2C: 5A 34    MOV   [__r1],X
    0E2E: 20       POP   X
    0E2F: 51 34    MOV   A,[__r1]
    0E31: 54 03    MOV   [X+3],A
    0E33: 51 35    MOV   A,[__r0]
    0E35: 54 02    MOV   [X+2],A
    0E37: 3C 35 00 CMP   [__r0],0x0
    0E3A: B0 06    JNZ   0x0E41
    0E3C: 3C 34 00 CMP   [__r1],0x0
    0E3F: A0 13    JZ    0x0E53
(0156) 			{
(0157) 				//UART_PutString(data);
(0158) 				command_lookup(*data);
    0E41: 62 D0 00 MOV   REG[0xD0],0x0
    0E44: 52 03    MOV   A,[X+3]
    0E46: 53 34    MOV   [__r1],A
    0E48: 52 02    MOV   A,[X+2]
    0E4A: 60 D4    MOV   REG[0xD4],A
    0E4C: 3E 34    MVI   A,[__r1]
    0E4E: 08       PUSH  A
    0E4F: 90 0E    CALL  _command_lookup
    0E51: 38 FF    ADD   SP,0xFF
(0159) 			}   
(0160) 			UART_CmdReset();  // Reset command buffer     
    0E53: 10       PUSH  X
    0E54: 7C 07 41 LCALL _UART_CmdReset
    0E57: 20       POP   X
(0161) 		}
(0162) 	}
    0E58: 8F 28    JMP   0x0D81
    0E5A: 38 FC    ADD   SP,0xFC
    0E5C: 20       POP   X
    0E5D: 8F FF    JMP   0x0E5D
(0163) }
(0164) 
(0165) //Parses the command buffer when new command received
(0166) int command_lookup(BYTE cmd)
(0167) {
_command_lookup:
  TX                   --> X+5
  data                 --> X+3
  count                --> X+1
  baud                 --> X+0
  cmd                  --> X-4
    0E5F: 10       PUSH  X
    0E60: 4F       MOV   X,SP
    0E61: 38 09    ADD   SP,0x9
(0168) 	BYTE* data;
(0169) 	BYTE* TX;
(0170) 	BYTE baud = 0xAA;
    0E63: 56 00 AA MOV   [X+0],0xAA
(0171) 	int count = 0;
    0E66: 56 02 00 MOV   [X+2],0x0
    0E69: 56 01 00 MOV   [X+1],0x0
(0172) 	switch (cmd)
    0E6C: 52 FC    MOV   A,[X-4]
    0E6E: 54 08    MOV   [X+8],A
    0E70: 56 07 00 MOV   [X+7],0x0
    0E73: 3D 07 00 CMP   [X+7],0x0
    0E76: B0 06    JNZ   0x0E7D
    0E78: 3D 08 45 CMP   [X+8],0x45
    0E7B: A1 4C    JZ    0x0FC8
    0E7D: 3D 07 00 CMP   [X+7],0x0
    0E80: B0 06    JNZ   0x0E87
    0E82: 3D 08 48 CMP   [X+8],0x48
    0E85: A0 F9    JZ    0x0F7F
    0E87: 3D 07 00 CMP   [X+7],0x0
    0E8A: B0 06    JNZ   0x0E91
    0E8C: 3D 08 49 CMP   [X+8],0x49
    0E8F: A1 5A    JZ    0x0FEA
    0E91: 3D 07 00 CMP   [X+7],0x0
    0E94: B0 06    JNZ   0x0E9B
    0E96: 3D 08 4A CMP   [X+8],0x4A
    0E99: A1 6E    JZ    0x1008
    0E9B: 3D 07 00 CMP   [X+7],0x0
    0E9E: B0 06    JNZ   0x0EA5
    0EA0: 3D 08 4C CMP   [X+8],0x4C
    0EA3: A1 42    JZ    0x0FE6
    0EA5: 3D 07 00 CMP   [X+7],0x0
    0EA8: B0 06    JNZ   0x0EAF
    0EAA: 3D 08 50 CMP   [X+8],0x50
    0EAD: A1 66    JZ    0x1014
    0EAF: 3D 07 00 CMP   [X+7],0x0
    0EB2: B0 06    JNZ   0x0EB9
    0EB4: 3D 08 51 CMP   [X+8],0x51
    0EB7: A1 1F    JZ    0x0FD7
    0EB9: 3D 07 00 CMP   [X+7],0x0
    0EBC: B0 06    JNZ   0x0EC3
    0EBE: 3D 08 52 CMP   [X+8],0x52
    0EC1: A1 36    JZ    0x0FF8
    0EC3: 3D 07 00 CMP   [X+7],0x0
    0EC6: B0 06    JNZ   0x0ECD
    0EC8: 3D 08 53 CMP   [X+8],0x53
    0ECB: A0 E9    JZ    0x0FB5
    0ECD: 3D 07 00 CMP   [X+7],0x0
    0ED0: B0 06    JNZ   0x0ED7
    0ED2: 3D 08 54 CMP   [X+8],0x54
    0ED5: A0 73    JZ    0x0F49
    0ED7: 52 08    MOV   A,[X+8]
    0ED9: 11 45    SUB   A,0x45
    0EDB: 52 07    MOV   A,[X+7]
    0EDD: 31 80    XOR   A,0x80
    0EDF: 19 80    SBB   A,0x80
    0EE1: C1 5A    JC    0x103C
    0EE3: 3D 07 00 CMP   [X+7],0x0
    0EE6: B0 06    JNZ   0x0EED
    0EE8: 3D 08 65 CMP   [X+8],0x65
    0EEB: A0 DC    JZ    0x0FC8
    0EED: 3D 07 00 CMP   [X+7],0x0
    0EF0: B0 06    JNZ   0x0EF7
    0EF2: 3D 08 68 CMP   [X+8],0x68
    0EF5: A0 89    JZ    0x0F7F
    0EF7: 3D 07 00 CMP   [X+7],0x0
    0EFA: B0 06    JNZ   0x0F01
    0EFC: 3D 08 69 CMP   [X+8],0x69
    0EFF: A0 EA    JZ    0x0FEA
    0F01: 3D 07 00 CMP   [X+7],0x0
    0F04: B0 06    JNZ   0x0F0B
    0F06: 3D 08 6A CMP   [X+8],0x6A
    0F09: A0 FE    JZ    0x1008
    0F0B: 3D 07 00 CMP   [X+7],0x0
    0F0E: B0 06    JNZ   0x0F15
    0F10: 3D 08 6C CMP   [X+8],0x6C
    0F13: A0 D2    JZ    0x0FE6
    0F15: 3D 07 00 CMP   [X+7],0x0
    0F18: B0 06    JNZ   0x0F1F
    0F1A: 3D 08 70 CMP   [X+8],0x70
    0F1D: A0 F6    JZ    0x1014
    0F1F: 3D 07 00 CMP   [X+7],0x0
    0F22: B0 06    JNZ   0x0F29
    0F24: 3D 08 71 CMP   [X+8],0x71
    0F27: A0 AF    JZ    0x0FD7
    0F29: 3D 07 00 CMP   [X+7],0x0
    0F2C: B0 06    JNZ   0x0F33
    0F2E: 3D 08 72 CMP   [X+8],0x72
    0F31: A0 C6    JZ    0x0FF8
    0F33: 3D 07 00 CMP   [X+7],0x0
    0F36: B0 06    JNZ   0x0F3D
    0F38: 3D 08 73 CMP   [X+8],0x73
    0F3B: A0 79    JZ    0x0FB5
    0F3D: 3D 07 00 CMP   [X+7],0x0
    0F40: B0 06    JNZ   0x0F47
    0F42: 3D 08 74 CMP   [X+8],0x74
    0F45: A0 03    JZ    0x0F49
    0F47: 80 F4    JMP   0x103C
(0173) 	{
(0174) 		// Turn to a specific count
(0175) 		case 'T':
(0176) 		case 't':
(0177) 			if (data = UART_szGetParam())
    0F49: 10       PUSH  X
    0F4A: 7C 07 70 LCALL _UART_szGetParam
    0F4D: 62 D0 00 MOV   REG[0xD0],0x0
    0F50: 53 35    MOV   [__r0],A
    0F52: 5A 34    MOV   [__r1],X
    0F54: 20       POP   X
    0F55: 51 34    MOV   A,[__r1]
    0F57: 54 04    MOV   [X+4],A
    0F59: 51 35    MOV   A,[__r0]
    0F5B: 54 03    MOV   [X+3],A
    0F5D: 3C 35 00 CMP   [__r0],0x0
    0F60: B0 06    JNZ   0x0F67
    0F62: 3C 34 00 CMP   [__r1],0x0
    0F65: A0 F3    JZ    0x1059
(0178) 				turn(atoi(data));
    0F67: 52 03    MOV   A,[X+3]
    0F69: 08       PUSH  A
    0F6A: 52 04    MOV   A,[X+4]
    0F6C: 08       PUSH  A
    0F6D: 7C 14 5B LCALL _atoi
    0F70: 62 D0 00 MOV   REG[0xD0],0x0
    0F73: 51 35    MOV   A,[__r0]
    0F75: 08       PUSH  A
    0F76: 51 34    MOV   A,[__r1]
    0F78: 08       PUSH  A
    0F79: 93 43    CALL  _turn
    0F7B: 38 FC    ADD   SP,0xFC
(0179) 			
(0180) 			#ifdef VERBOSE
(0181) 				else UART_CPutString("No value given!\r\n");
(0182) 			#endif
(0183) 			break;
    0F7D: 80 DB    JMP   0x1059
(0184) 						
(0185) 		// Apply the brake to the specified value [100, 900]
(0186) 		case 'h':
(0187) 		case 'H':
(0188) 			if (data = UART_szGetParam())
    0F7F: 10       PUSH  X
    0F80: 7C 07 70 LCALL _UART_szGetParam
    0F83: 62 D0 00 MOV   REG[0xD0],0x0
    0F86: 53 35    MOV   [__r0],A
    0F88: 5A 34    MOV   [__r1],X
    0F8A: 20       POP   X
    0F8B: 51 34    MOV   A,[__r1]
    0F8D: 54 04    MOV   [X+4],A
    0F8F: 51 35    MOV   A,[__r0]
    0F91: 54 03    MOV   [X+3],A
    0F93: 3C 35 00 CMP   [__r0],0x0
    0F96: B0 06    JNZ   0x0F9D
    0F98: 3C 34 00 CMP   [__r1],0x0
    0F9B: A0 BD    JZ    0x1059
(0189) 				brake(atoi(data));
    0F9D: 52 03    MOV   A,[X+3]
    0F9F: 08       PUSH  A
    0FA0: 52 04    MOV   A,[X+4]
    0FA2: 08       PUSH  A
    0FA3: 7C 14 5B LCALL _atoi
    0FA6: 62 D0 00 MOV   REG[0xD0],0x0
    0FA9: 51 35    MOV   A,[__r0]
    0FAB: 08       PUSH  A
    0FAC: 51 34    MOV   A,[__r1]
    0FAE: 08       PUSH  A
    0FAF: 93 50    CALL  _brake
    0FB1: 38 FC    ADD   SP,0xFC
(0190) 			
(0191) 			#ifdef VERBOSE
(0192) 				else UART_CPutString("No brake value given!!!\r\n");
(0193) 			#endif
(0194) 			break;
    0FB3: 80 A5    JMP   0x1059
(0195) 			
(0196) 		// Request the steer encoder count
(0197) 		case 'S':
(0198) 		case 's':
(0199) 			UART_PutSHexInt(steerCount);
    0FB5: 10       PUSH  X
    0FB6: 62 D0 00 MOV   REG[0xD0],0x0
    0FB9: 51 36    MOV   A,[steerCount]
    0FBB: 08       PUSH  A
    0FBC: 51 37    MOV   A,[steerCount+1]
    0FBE: 20       POP   X
    0FBF: 7C 06 7C LCALL _UART_PutSHexInt
(0200) 			UART_PutCRLF();
    0FC2: 7C 07 38 LCALL _UART_PutCRLF
    0FC5: 20       POP   X
(0201) 			break;
    0FC6: 80 92    JMP   0x1059
(0202) 			
(0203) 		// Manual turning right
(0204) 		case 'E':
(0205) 		case 'e':
(0206) 			#ifdef VERBOSE
(0207) 				UART_CPutString("Turning Right\r\n");
(0208) 			#endif
(0209) 			
(0210) 			setControllerSpeed(STEER_CTL, STEER_SPEED, RIGHT);
    0FC8: 50 01    MOV   A,0x1
    0FCA: 08       PUSH  A
    0FCB: 50 50    MOV   A,0x50
    0FCD: 08       PUSH  A
    0FCE: 50 80    MOV   A,0x80
    0FD0: 08       PUSH  A
    0FD1: 90 98    CALL  _setControllerSpeed
    0FD3: 38 FD    ADD   SP,0xFD
(0211) 			break;
    0FD5: 80 83    JMP   0x1059
(0212) 			
(0213) 		// Manual turning left
(0214) 		case 'Q':
(0215) 		case 'q':
(0216) 			#ifdef VERBOSE
(0217) 				UART_CPutString("Turning Left\r\n");
(0218) 			#endif
(0219) 			
(0220) 			setControllerSpeed(STEER_CTL, STEER_SPEED, LEFT);
    0FD7: 50 00    MOV   A,0x0
    0FD9: 08       PUSH  A
    0FDA: 50 50    MOV   A,0x50
    0FDC: 08       PUSH  A
    0FDD: 50 80    MOV   A,0x80
    0FDF: 08       PUSH  A
    0FE0: 90 89    CALL  _setControllerSpeed
    0FE2: 38 FD    ADD   SP,0xFD
(0221) 			break;
    0FE4: 80 74    JMP   0x1059
(0222) 			
(0223) 		//manual stopping
(0224) 		case 'L':
(0225) 		case 'l':
(0226) 			stop();
    0FE6: 91 52    CALL  _stop
(0227) 			break;
    0FE8: 80 70    JMP   0x1059
(0228) 			
(0229) 		//sending the baud character
(0230) 		case 'I':
(0231) 		case 'i':
(0232) 			UART_PutChar('S');
    0FEA: 10       PUSH  X
    0FEB: 50 53    MOV   A,0x53
    0FED: 7C 06 83 LCALL _UART_PutChar
(0233) 			TX8_PutChar((CHAR)BAUD_BYTE);		
    0FF0: 50 AA    MOV   A,0xAA
    0FF2: 7C 08 2D LCALL _TX8_PutChar
    0FF5: 20       POP   X
(0234) 			break;
    0FF6: 80 62    JMP   0x1059
(0235) 			
(0236) 		//reset the position of the wheels to '0'
(0237) 		case 'R':
(0238) 		case 'r':
(0239) 			calibrateSteering();
    0FF8: 93 4A    CALL  _calibrateSteering
(0240) 			UART_CPutString("Shaft Reset\r\n");
    0FFA: 10       PUSH  X
    0FFB: 50 01    MOV   A,0x1
    0FFD: 08       PUSH  A
    0FFE: 50 D4    MOV   A,0xD4
    1000: 5C       MOV   X,A
    1001: 18       POP   A
    1002: 7C 07 26 LCALL _UART_CPutString
    1005: 20       POP   X
(0241) 			break;
    1006: 80 52    JMP   0x1059
(0242) 
(0243) 			
(0244) 		// Fully release the brake
(0245) 		case 'J':
(0246) 		case 'j':
(0247) 			brake(100);
    1008: 50 00    MOV   A,0x0
    100A: 08       PUSH  A
    100B: 50 64    MOV   A,0x64
    100D: 08       PUSH  A
    100E: 92 F1    CALL  _brake
    1010: 38 FE    ADD   SP,0xFE
(0248) 			break;
    1012: 80 46    JMP   0x1059
(0249) 			
(0250) 		// Request the value of the steer pot
(0251) 		case 'P':
(0252) 		case 'p':
(0253) 			UART_CPutString("Steer pot is at >");
    1014: 10       PUSH  X
    1015: 50 01    MOV   A,0x1
    1017: 08       PUSH  A
    1018: 50 C2    MOV   A,0xC2
    101A: 5C       MOV   X,A
    101B: 18       POP   A
    101C: 7C 07 26 LCALL _UART_CPutString
    101F: 20       POP   X
(0254) 			UART_PutSHexInt(getSteerPotPosition());
    1020: 92 5B    CALL  _getSteerPotPosition
    1022: 10       PUSH  X
    1023: 62 D0 00 MOV   REG[0xD0],0x0
    1026: 51 35    MOV   A,[__r0]
    1028: 08       PUSH  A
    1029: 51 34    MOV   A,[__r1]
    102B: 20       POP   X
    102C: 7C 06 7C LCALL _UART_PutSHexInt
(0255) 			UART_CPutString(" counts<\r\n");
    102F: 50 01    MOV   A,0x1
    1031: 08       PUSH  A
    1032: 50 B7    MOV   A,0xB7
    1034: 5C       MOV   X,A
    1035: 18       POP   A
    1036: 7C 07 26 LCALL _UART_CPutString
    1039: 20       POP   X
(0256) 			break;
    103A: 80 1E    JMP   0x1059
(0257) 			
(0258) 		//Invalid command
(0259) 		default:
(0260) 			UART_CPutString("Invalid Command: >");
    103C: 10       PUSH  X
    103D: 50 01    MOV   A,0x1
    103F: 08       PUSH  A
    1040: 50 A4    MOV   A,0xA4
    1042: 5C       MOV   X,A
    1043: 18       POP   A
    1044: 7C 07 26 LCALL _UART_CPutString
    1047: 20       POP   X
(0261) 			UART_PutChar(cmd);
    1048: 10       PUSH  X
    1049: 52 FC    MOV   A,[X-4]
    104B: 7C 06 83 LCALL _UART_PutChar
(0262) 			UART_CPutString("<\n\r");
    104E: 50 01    MOV   A,0x1
    1050: 08       PUSH  A
    1051: 50 A0    MOV   A,0xA0
    1053: 5C       MOV   X,A
    1054: 18       POP   A
    1055: 7C 07 26 LCALL _UART_CPutString
    1058: 20       POP   X
(0263) 			break;
(0264) 	}
(0265) 	UART_CmdReset();
    1059: 10       PUSH  X
    105A: 7C 07 41 LCALL _UART_CmdReset
    105D: 20       POP   X
(0266) 	return 0;
    105E: 62 D0 00 MOV   REG[0xD0],0x0
    1061: 55 34 00 MOV   [__r1],0x0
    1064: 55 35 00 MOV   [__r0],0x0
    1067: 38 F7    ADD   SP,0xF7
    1069: 20       POP   X
    106A: 7F       RET   
(0267) }
(0268) 
(0269) void setControllerSpeed(BYTE addr, BYTE speed, BYTE dir) {
_setControllerSpeed:
  TX                   --> X+4
  dir                  --> X-6
  speed                --> X-5
  addr                 --> X-4
    106B: 10       PUSH  X
    106C: 4F       MOV   X,SP
    106D: 38 0A    ADD   SP,0xA
(0270) 	static BYTE lastValue[2];
(0271) 	
(0272) 	if (lastValue[addr == BRAKE_CTL ? 1 : 0] != dir << 7 | speed) {
    106F: 3D FC 82 CMP   [X-4],0x82
    1072: B0 09    JNZ   0x107C
    1074: 56 03 01 MOV   [X+3],0x1
    1077: 56 02 00 MOV   [X+2],0x0
    107A: 80 07    JMP   0x1082
    107C: 56 03 00 MOV   [X+3],0x0
    107F: 56 02 00 MOV   [X+2],0x0
    1082: 52 FA    MOV   A,[X-6]
    1084: 62 D0 00 MOV   REG[0xD0],0x0
    1087: 64       ASL   A
    1088: 64       ASL   A
    1089: 64       ASL   A
    108A: 64       ASL   A
    108B: 64       ASL   A
    108C: 64       ASL   A
    108D: 64       ASL   A
    108E: 53 35    MOV   [__r0],A
    1090: 52 03    MOV   A,[X+3]
    1092: 01 38    ADD   A,0x38
    1094: 53 32    MOV   [__r3],A
    1096: 52 02    MOV   A,[X+2]
    1098: 09 00    ADC   A,0x0
    109A: 60 D4    MOV   REG[0xD4],A
    109C: 3E 32    MVI   A,[__r3]
    109E: 3A 35    CMP   A,[__r0]
    10A0: A0 09    JZ    0x10AA
    10A2: 56 01 01 MOV   [X+1],0x1
    10A5: 56 00 00 MOV   [X+0],0x0
    10A8: 80 07    JMP   0x10B0
    10AA: 56 01 00 MOV   [X+1],0x0
    10AD: 56 00 00 MOV   [X+0],0x0
    10B0: 62 D0 00 MOV   REG[0xD0],0x0
    10B3: 52 FB    MOV   A,[X-5]
    10B5: 53 34    MOV   [__r1],A
    10B7: 55 35 00 MOV   [__r0],0x0
    10BA: 52 01    MOV   A,[X+1]
    10BC: 2A 34    OR    A,[__r1]
    10BE: 53 34    MOV   [__r1],A
    10C0: 52 00    MOV   A,[X+0]
    10C2: 2A 35    OR    A,[__r0]
    10C4: 39 00    CMP   A,0x0
    10C6: B0 06    JNZ   0x10CD
    10C8: 3C 34 00 CMP   [__r1],0x0
    10CB: A0 6A    JZ    0x1136
(0273) 		BYTE TX[4];
(0274) 		TX[0] = addr;
    10CD: 52 FC    MOV   A,[X-4]
    10CF: 54 04    MOV   [X+4],A
(0275) 		TX[1] = dir;
    10D1: 52 FA    MOV   A,[X-6]
    10D3: 54 05    MOV   [X+5],A
(0276) 		TX[2] = speed;
    10D5: 52 FB    MOV   A,[X-5]
    10D7: 54 06    MOV   [X+6],A
(0277) 		TX[3] = (addr + dir + speed) & 0x7F;
    10D9: 62 D0 00 MOV   REG[0xD0],0x0
    10DC: 52 FC    MOV   A,[X-4]
    10DE: 03 FA    ADD   A,[X-6]
    10E0: 53 35    MOV   [__r0],A
    10E2: 52 FB    MOV   A,[X-5]
    10E4: 04 35    ADD   [__r0],A
    10E6: 51 35    MOV   A,[__r0]
    10E8: 21 7F    AND   A,0x7F
    10EA: 54 07    MOV   [X+7],A
(0278) 		TX8_Write(TX,4);
    10EC: 10       PUSH  X
    10ED: 50 04    MOV   A,0x4
    10EF: 08       PUSH  A
    10F0: 5A 34    MOV   [__r1],X
    10F2: 06 34 04 ADD   [__r1],0x4
    10F5: 50 07    MOV   A,0x7
    10F7: 08       PUSH  A
    10F8: 51 34    MOV   A,[__r1]
    10FA: 08       PUSH  A
    10FB: 7C 08 47 LCALL _TX8_Write
    10FE: 38 FD    ADD   SP,0xFD
    1100: 20       POP   X
(0279) 		
(0280) 		lastValue[addr == BRAKE_CTL ? 1 : 0] = dir << 7 | speed;
    1101: 3D FC 82 CMP   [X-4],0x82
    1104: B0 09    JNZ   0x110E
    1106: 56 09 01 MOV   [X+9],0x1
    1109: 56 08 00 MOV   [X+8],0x0
    110C: 80 07    JMP   0x1114
    110E: 56 09 00 MOV   [X+9],0x0
    1111: 56 08 00 MOV   [X+8],0x0
    1114: 52 FA    MOV   A,[X-6]
    1116: 62 D0 00 MOV   REG[0xD0],0x0
    1119: 64       ASL   A
    111A: 64       ASL   A
    111B: 64       ASL   A
    111C: 64       ASL   A
    111D: 64       ASL   A
    111E: 64       ASL   A
    111F: 64       ASL   A
    1120: 53 35    MOV   [__r0],A
    1122: 52 FB    MOV   A,[X-5]
    1124: 2C 35    OR    [__r0],A
    1126: 52 09    MOV   A,[X+9]
    1128: 01 38    ADD   A,0x38
    112A: 53 32    MOV   [__r3],A
    112C: 52 08    MOV   A,[X+8]
    112E: 09 00    ADC   A,0x0
    1130: 60 D5    MOV   REG[0xD5],A
    1132: 51 35    MOV   A,[__r0]
    1134: 3F 32    MVI   [__r3],A
(0281) 	}
    1136: 38 F6    ADD   SP,0xF6
    1138: 20       POP   X
    1139: 7F       RET   
(0282) }
(0283) 
(0284) void stop(void) {
(0285) 	setControllerSpeed(STEER_CTL, STOP, STOP);
_stop:
    113A: 50 00    MOV   A,0x0
    113C: 08       PUSH  A
    113D: 08       PUSH  A
    113E: 50 80    MOV   A,0x80
    1140: 08       PUSH  A
    1141: 9F 28    CALL  _setControllerSpeed
(0286) 	setControllerSpeed(BRAKE_CTL, STOP, STOP);
    1143: 50 00    MOV   A,0x0
    1145: 08       PUSH  A
    1146: 08       PUSH  A
    1147: 50 82    MOV   A,0x82
    1149: 08       PUSH  A
    114A: 9F 1F    CALL  _setControllerSpeed
    114C: 38 FA    ADD   SP,0xFA
    114E: 7F       RET   
(0287) 	
(0288) 	#ifdef VERBOSE
(0289) 		UART_CPutString("Stopping all motors!!");
(0290) 		UART_PutCRLF();
(0291) 	#endif
(0292) }
(0293) 
(0294) void updateBrakeCtl(void) {
_updateBrakeCtl:
  brakePosition        --> X+0
    114F: 10       PUSH  X
    1150: 4F       MOV   X,SP
    1151: 38 02    ADD   SP,0x2
(0295) 	unsigned int brakePosition = getBrakePosition();
    1153: 90 E7    CALL  _getBrakePosition
    1155: 62 D0 00 MOV   REG[0xD0],0x0
    1158: 51 34    MOV   A,[__r1]
    115A: 54 01    MOV   [X+1],A
    115C: 51 35    MOV   A,[__r0]
    115E: 54 00    MOV   [X+0],A
(0296) 	static int error;
(0297) 	
(0298) 	error = brakeSetpoint - brakePosition;
    1160: 62 D0 00 MOV   REG[0xD0],0x0
    1163: 51 43    MOV   A,[brakeSetpoint+1]
    1165: 13 01    SUB   A,[X+1]
    1167: 62 D0 00 MOV   REG[0xD0],0x0
    116A: 53 34    MOV   [__r1],A
    116C: 62 D0 00 MOV   REG[0xD0],0x0
    116F: 51 42    MOV   A,[brakeSetpoint]
    1171: 1B 00    SBB   A,[X+0]
    1173: 62 D0 00 MOV   REG[0xD0],0x0
    1176: 53 35    MOV   [__r0],A
    1178: 51 34    MOV   A,[__r1]
    117A: 08       PUSH  A
    117B: 51 35    MOV   A,[__r0]
    117D: 62 D0 00 MOV   REG[0xD0],0x0
    1180: 53 3A    MOV   [steerCount+4],A
    1182: 18       POP   A
    1183: 53 3B    MOV   [steerCount+5],A
(0299) 	
(0300) 	if (error < -20)
    1185: 51 3B    MOV   A,[steerCount+5]
    1187: 11 EC    SUB   A,0xEC
    1189: 51 3A    MOV   A,[steerCount+4]
    118B: 31 80    XOR   A,0x80
    118D: 19 7F    SBB   A,0x7F
    118F: D0 10    JNC   0x11A0
(0301) 		setControllerSpeed(BRAKE_CTL, BRAKE_SPEED, APPLY);
    1191: 50 01    MOV   A,0x1
    1193: 08       PUSH  A
    1194: 50 78    MOV   A,0x78
    1196: 08       PUSH  A
    1197: 50 82    MOV   A,0x82
    1199: 08       PUSH  A
    119A: 9E CF    CALL  _setControllerSpeed
    119C: 38 FD    ADD   SP,0xFD
    119E: 80 31    JMP   0x11D0
(0302) 	else if (error > 20)
    11A0: 62 D0 00 MOV   REG[0xD0],0x0
    11A3: 50 14    MOV   A,0x14
    11A5: 12 3B    SUB   A,[steerCount+5]
    11A7: 51 3A    MOV   A,[steerCount+4]
    11A9: 31 80    XOR   A,0x80
    11AB: 62 D0 00 MOV   REG[0xD0],0x0
    11AE: 53 2F    MOV   [__rX],A
    11B0: 50 80    MOV   A,0x80
    11B2: 1A 2F    SBB   A,[__rX]
    11B4: D0 10    JNC   0x11C5
(0303) 		setControllerSpeed(BRAKE_CTL, BRAKE_SPEED, RELEASE);
    11B6: 50 00    MOV   A,0x0
    11B8: 08       PUSH  A
    11B9: 50 78    MOV   A,0x78
    11BB: 08       PUSH  A
    11BC: 50 82    MOV   A,0x82
    11BE: 08       PUSH  A
    11BF: 9E AA    CALL  _setControllerSpeed
    11C1: 38 FD    ADD   SP,0xFD
    11C3: 80 0C    JMP   0x11D0
(0304) 	else
(0305) 		setControllerSpeed(BRAKE_CTL, STOP, STOP);
    11C5: 50 00    MOV   A,0x0
    11C7: 08       PUSH  A
    11C8: 08       PUSH  A
    11C9: 50 82    MOV   A,0x82
    11CB: 08       PUSH  A
    11CC: 9E 9D    CALL  _setControllerSpeed
    11CE: 38 FD    ADD   SP,0xFD
    11D0: 38 FE    ADD   SP,0xFE
    11D2: 20       POP   X
    11D3: 7F       RET   
(0306) }
(0307) 
(0308) void updateTurnCtl(void) {
_updateTurnCtl:
  error                --> X+0
    11D4: 10       PUSH  X
    11D5: 4F       MOV   X,SP
    11D6: 38 02    ADD   SP,0x2
(0309) 	int error = steerSetpoint - steerCount;
    11D8: 62 D0 00 MOV   REG[0xD0],0x0
    11DB: 51 41    MOV   A,[steerSetpoint+1]
    11DD: 62 D0 00 MOV   REG[0xD0],0x0
    11E0: 12 37    SUB   A,[steerCount+1]
    11E2: 54 01    MOV   [X+1],A
    11E4: 62 D0 00 MOV   REG[0xD0],0x0
    11E7: 51 40    MOV   A,[steerSetpoint]
    11E9: 62 D0 00 MOV   REG[0xD0],0x0
    11EC: 1A 36    SBB   A,[steerCount]
    11EE: 54 00    MOV   [X+0],A
(0310) 	
(0311) 	if (error < -20)
    11F0: 52 01    MOV   A,[X+1]
    11F2: 11 EC    SUB   A,0xEC
    11F4: 52 00    MOV   A,[X+0]
    11F6: 31 80    XOR   A,0x80
    11F8: 19 7F    SBB   A,0x7F
    11FA: D0 10    JNC   0x120B
(0312) 		setControllerSpeed(STEER_CTL, STEER_SPEED, RIGHT);
    11FC: 50 01    MOV   A,0x1
    11FE: 08       PUSH  A
    11FF: 50 50    MOV   A,0x50
    1201: 08       PUSH  A
    1202: 50 80    MOV   A,0x80
    1204: 08       PUSH  A
    1205: 9E 64    CALL  _setControllerSpeed
    1207: 38 FD    ADD   SP,0xFD
    1209: 80 2E    JMP   0x1238
(0313) 	else if (error > 20)
    120B: 50 14    MOV   A,0x14
    120D: 13 01    SUB   A,[X+1]
    120F: 52 00    MOV   A,[X+0]
    1211: 31 80    XOR   A,0x80
    1213: 62 D0 00 MOV   REG[0xD0],0x0
    1216: 53 2F    MOV   [__rX],A
    1218: 50 80    MOV   A,0x80
    121A: 1A 2F    SBB   A,[__rX]
    121C: D0 10    JNC   0x122D
(0314) 		setControllerSpeed(STEER_CTL, STEER_SPEED, LEFT);
    121E: 50 00    MOV   A,0x0
    1220: 08       PUSH  A
    1221: 50 50    MOV   A,0x50
    1223: 08       PUSH  A
    1224: 50 80    MOV   A,0x80
    1226: 08       PUSH  A
    1227: 9E 42    CALL  _setControllerSpeed
    1229: 38 FD    ADD   SP,0xFD
    122B: 80 0C    JMP   0x1238
(0315) 	else
(0316) 		setControllerSpeed(STEER_CTL, STOP, STOP);
    122D: 50 00    MOV   A,0x0
    122F: 08       PUSH  A
    1230: 08       PUSH  A
    1231: 50 80    MOV   A,0x80
    1233: 08       PUSH  A
    1234: 9E 35    CALL  _setControllerSpeed
    1236: 38 FD    ADD   SP,0xFD
    1238: 38 FE    ADD   SP,0xFE
    123A: 20       POP   X
    123B: 7F       RET   
(0317) }
(0318) 
(0319) unsigned int getBrakePosition(void)
(0320) {
(0321) 	static unsigned int brakePot;
(0322) 	
(0323) 	if (!cacheValid) {
_getBrakePosition:
    123C: 62 D0 00 MOV   REG[0xD0],0x0
    123F: 3C 44 00 CMP   [cacheValid],0x0
    1242: B0 29    JNZ   0x126C
(0324) 		DUALADC_GetSamples(2);
    1244: 10       PUSH  X
    1245: 50 02    MOV   A,0x2
    1247: 7C 0B AC LCALL _DUALADC_GetSamples
    124A: 20       POP   X
(0325) 		
(0326) 		// Wait for data to be ready
(0327) 		while(DUALADC_fIsDataAvailable() == 0);
    124B: 10       PUSH  X
    124C: 7C 0C 10 LCALL DUALADC_fIsData|_DUALADC_fIsDataAvailable|DUALADC_fIsDataAvailable|_DUALADC_fIsData
    124F: 20       POP   X
    1250: 62 D0 00 MOV   REG[0xD0],0x0
    1253: 39 00    CMP   A,0x0
    1255: AF F5    JZ    0x124B
(0328) 			
(0329) 		// Get Data and clear flag
(0330) 		brakePot = DUALADC_iGetData2ClearFlag();
    1257: 10       PUSH  X
    1258: 7C 0C 2B LCALL _DUALADC_iGetData2ClearFlag
    125B: 62 D0 00 MOV   REG[0xD0],0x0
    125E: 5A 35    MOV   [__r0],X
    1260: 20       POP   X
    1261: 08       PUSH  A
    1262: 51 35    MOV   A,[__r0]
    1264: 62 D0 00 MOV   REG[0xD0],0x0
    1267: 53 3C    MOV   [steerCount+6],A
    1269: 18       POP   A
    126A: 53 3D    MOV   [steerCount+7],A
(0331) 	}
(0332) 	
(0333) 	return brakePot;
    126C: 62 D0 00 MOV   REG[0xD0],0x0
    126F: 51 3D    MOV   A,[steerCount+7]
    1271: 08       PUSH  A
    1272: 51 3C    MOV   A,[steerCount+6]
    1274: 62 D0 00 MOV   REG[0xD0],0x0
    1277: 53 35    MOV   [__r0],A
    1279: 18       POP   A
    127A: 53 34    MOV   [__r1],A
    127C: 7F       RET   
(0334) }
(0335) 
(0336) unsigned int getSteerPotPosition(void)
(0337) {
(0338) 	static unsigned int steerPot;
(0339) 	
(0340) 	if (!cacheValid) {
_getSteerPotPosition:
    127D: 62 D0 00 MOV   REG[0xD0],0x0
    1280: 3C 44 00 CMP   [cacheValid],0x0
    1283: B0 29    JNZ   0x12AD
(0341) 		DUALADC_GetSamples(2);
    1285: 10       PUSH  X
    1286: 50 02    MOV   A,0x2
    1288: 7C 0B AC LCALL _DUALADC_GetSamples
    128B: 20       POP   X
(0342) 		
(0343) 		// Wait for data to be ready
(0344) 		while(DUALADC_fIsDataAvailable() == 0);
    128C: 10       PUSH  X
    128D: 7C 0C 10 LCALL DUALADC_fIsData|_DUALADC_fIsDataAvailable|DUALADC_fIsDataAvailable|_DUALADC_fIsData
    1290: 20       POP   X
    1291: 62 D0 00 MOV   REG[0xD0],0x0
    1294: 39 00    CMP   A,0x0
    1296: AF F5    JZ    0x128C
(0345) 			
(0346) 		// Get Data and clear flag
(0347) 		steerPot = DUALADC_iGetData1ClearFlag();
    1298: 10       PUSH  X
    1299: 7C 0C 18 LCALL _DUALADC_iGetData1ClearFlag
    129C: 62 D0 00 MOV   REG[0xD0],0x0
    129F: 5A 35    MOV   [__r0],X
    12A1: 20       POP   X
    12A2: 08       PUSH  A
    12A3: 51 35    MOV   A,[__r0]
    12A5: 62 D0 00 MOV   REG[0xD0],0x0
    12A8: 53 3E    MOV   [steerCount+8],A
    12AA: 18       POP   A
    12AB: 53 3F    MOV   [steerCount+9],A
(0348) 	}
(0349) 	
(0350) 	return steerPot;
    12AD: 62 D0 00 MOV   REG[0xD0],0x0
    12B0: 51 3F    MOV   A,[steerCount+9]
    12B2: 08       PUSH  A
    12B3: 51 3E    MOV   A,[steerCount+8]
    12B5: 62 D0 00 MOV   REG[0xD0],0x0
    12B8: 53 35    MOV   [__r0],A
    12BA: 18       POP   A
    12BB: 53 34    MOV   [__r1],A
    12BD: 7F       RET   
(0351) }
(0352) 
(0353) void turn(int count)
(0354) {
_turn:
  count                --> X-5
    12BE: 10       PUSH  X
    12BF: 4F       MOV   X,SP
(0355) 	count = max(ENCODER_LEFT_BOUND, count);
    12C0: 52 FB    MOV   A,[X-5]
    12C2: 08       PUSH  A
    12C3: 52 FC    MOV   A,[X-4]
    12C5: 08       PUSH  A
    12C6: 50 F7    MOV   A,0xF7
    12C8: 08       PUSH  A
    12C9: 50 04    MOV   A,0x4
    12CB: 08       PUSH  A
    12CC: 9A 24    CALL  _max
    12CE: 62 D0 00 MOV   REG[0xD0],0x0
    12D1: 51 34    MOV   A,[__r1]
    12D3: 54 FC    MOV   [X-4],A
    12D5: 51 35    MOV   A,[__r0]
    12D7: 54 FB    MOV   [X-5],A
(0356) 	count = min(ENCODER_RIGHT_BOUND, count);
    12D9: 52 FB    MOV   A,[X-5]
    12DB: 08       PUSH  A
    12DC: 52 FC    MOV   A,[X-4]
    12DE: 08       PUSH  A
    12DF: 50 08    MOV   A,0x8
    12E1: 08       PUSH  A
    12E2: 50 FC    MOV   A,0xFC
    12E4: 08       PUSH  A
    12E5: 99 D1    CALL  __UserModules_end|_min|__text_start|_min
    12E7: 38 F8    ADD   SP,0xF8
    12E9: 62 D0 00 MOV   REG[0xD0],0x0
    12EC: 51 34    MOV   A,[__r1]
    12EE: 54 FC    MOV   [X-4],A
    12F0: 51 35    MOV   A,[__r0]
    12F2: 54 FB    MOV   [X-5],A
(0357) 	
(0358) 	steerSetpoint = count;
    12F4: 62 D0 00 MOV   REG[0xD0],0x0
    12F7: 52 FC    MOV   A,[X-4]
    12F9: 53 41    MOV   [steerSetpoint+1],A
    12FB: 52 FB    MOV   A,[X-5]
    12FD: 53 40    MOV   [steerSetpoint],A
    12FF: 20       POP   X
    1300: 7F       RET   
(0359) 	
(0360) 	#ifdef VERBOSE
(0361) 		UART_CPutString("Steer setpoint: ");
(0362) 		UART_PutSHexInt(count);
(0363) 		UART_PutCRLF();
(0364) 	#endif
(0365) }
(0366) 
(0367) void brake(int pVal)
(0368) {
_brake:
  pVal                 --> X-5
    1301: 10       PUSH  X
    1302: 4F       MOV   X,SP
(0369) 	pVal = max(BRAKE_MIN_POS, pVal);
    1303: 52 FB    MOV   A,[X-5]
    1305: 08       PUSH  A
    1306: 52 FC    MOV   A,[X-4]
    1308: 08       PUSH  A
    1309: 50 00    MOV   A,0x0
    130B: 08       PUSH  A
    130C: 50 64    MOV   A,0x64
    130E: 08       PUSH  A
    130F: 99 E1    CALL  _max
    1311: 62 D0 00 MOV   REG[0xD0],0x0
    1314: 51 34    MOV   A,[__r1]
    1316: 54 FC    MOV   [X-4],A
    1318: 51 35    MOV   A,[__r0]
    131A: 54 FB    MOV   [X-5],A
(0370) 	pVal = min(BRAKE_MAX_POS, pVal);
    131C: 52 FB    MOV   A,[X-5]
    131E: 08       PUSH  A
    131F: 52 FC    MOV   A,[X-4]
    1321: 08       PUSH  A
    1322: 50 03    MOV   A,0x3
    1324: 08       PUSH  A
    1325: 50 84    MOV   A,0x84
    1327: 08       PUSH  A
    1328: 99 8E    CALL  __UserModules_end|_min|__text_start|_min
    132A: 38 F8    ADD   SP,0xF8
    132C: 62 D0 00 MOV   REG[0xD0],0x0
    132F: 51 34    MOV   A,[__r1]
    1331: 54 FC    MOV   [X-4],A
    1333: 51 35    MOV   A,[__r0]
    1335: 54 FB    MOV   [X-5],A
(0371) 	
(0372) 	brakeSetpoint = pVal;
    1337: 62 D0 00 MOV   REG[0xD0],0x0
    133A: 52 FC    MOV   A,[X-4]
    133C: 53 43    MOV   [brakeSetpoint+1],A
    133E: 52 FB    MOV   A,[X-5]
    1340: 53 42    MOV   [brakeSetpoint],A
    1342: 20       POP   X
    1343: 7F       RET   
(0373) 	
(0374) 	#ifdef VERBOSE
(0375) 		UART_CPutString("Brake setpoint: ");
(0376) 		UART_PutSHexInt(pVal);
(0377) 		UART_PutCRLF();
(0378) 	#endif 
(0379) }
(0380) 
(0381) void calibrateSteering(void)
(0382) {
_calibrateSteering:
  dir                  --> X+2
  steerPotvalue        --> X+0
    1344: 10       PUSH  X
    1345: 4F       MOV   X,SP
    1346: 38 03    ADD   SP,0x3
(0383) 	BYTE dir = 0;
    1348: 56 02 00 MOV   [X+2],0x0
(0384) 	
(0385) 	unsigned int steerPotvalue = getSteerPotPosition();
    134B: 9F 30    CALL  _getSteerPotPosition
    134D: 62 D0 00 MOV   REG[0xD0],0x0
    1350: 51 34    MOV   A,[__r1]
    1352: 54 01    MOV   [X+1],A
    1354: 51 35    MOV   A,[__r0]
    1356: 54 00    MOV   [X+0],A
(0386) 	
(0387) 	if (steerPotvalue < STEER_POT_CENTER) dir = RIGHT;
    1358: 52 01    MOV   A,[X+1]
    135A: 11 04    SUB   A,0x4
    135C: 52 00    MOV   A,[X+0]
    135E: 19 02    SBB   A,0x2
    1360: D0 06    JNC   0x1367
    1362: 56 02 01 MOV   [X+2],0x1
    1365: 80 0E    JMP   0x1374
(0388) 	else if (steerPotvalue > STEER_POT_CENTER) dir = LEFT;
    1367: 50 04    MOV   A,0x4
    1369: 13 01    SUB   A,[X+1]
    136B: 50 02    MOV   A,0x2
    136D: 1B 00    SBB   A,[X+0]
    136F: D0 04    JNC   0x1374
    1371: 56 02 00 MOV   [X+2],0x0
(0389) 	
(0390) 	setControllerSpeed(STEER_CTL, STEER_SPEED, dir);
    1374: 52 02    MOV   A,[X+2]
    1376: 08       PUSH  A
    1377: 50 50    MOV   A,0x50
    1379: 08       PUSH  A
    137A: 50 80    MOV   A,0x80
    137C: 08       PUSH  A
    137D: 9C EC    CALL  _setControllerSpeed
    137F: 38 FD    ADD   SP,0xFD
    1381: 80 0E    JMP   0x1390
(0391) 	
(0392) 	while (abs(steerPotvalue - STEER_POT_CENTER) > 30)
(0393) 	{
(0394) 		steerPotvalue = getSteerPotPosition();
    1383: 9E F8    CALL  _getSteerPotPosition
    1385: 62 D0 00 MOV   REG[0xD0],0x0
    1388: 51 34    MOV   A,[__r1]
    138A: 54 01    MOV   [X+1],A
    138C: 51 35    MOV   A,[__r0]
    138E: 54 00    MOV   [X+0],A
(0395) 	}
    1390: 62 D0 00 MOV   REG[0xD0],0x0
    1393: 52 01    MOV   A,[X+1]
    1395: 11 04    SUB   A,0x4
    1397: 53 34    MOV   [__r1],A
    1399: 52 00    MOV   A,[X+0]
    139B: 19 02    SBB   A,0x2
    139D: 08       PUSH  A
    139E: 51 34    MOV   A,[__r1]
    13A0: 08       PUSH  A
    13A1: 7C 15 DE LCALL _abs
    13A4: 38 FE    ADD   SP,0xFE
    13A6: 62 D0 00 MOV   REG[0xD0],0x0
    13A9: 50 1E    MOV   A,0x1E
    13AB: 12 34    SUB   A,[__r1]
    13AD: 51 35    MOV   A,[__r0]
    13AF: 31 80    XOR   A,0x80
    13B1: 53 2F    MOV   [__rX],A
    13B3: 50 80    MOV   A,0x80
    13B5: 1A 2F    SBB   A,[__rX]
    13B7: CF CB    JC    0x1383
(0396) 	
(0397) 	setControllerSpeed(STEER_CTL, STOP, STOP);
    13B9: 50 00    MOV   A,0x0
    13BB: 08       PUSH  A
    13BC: 08       PUSH  A
    13BD: 50 80    MOV   A,0x80
    13BF: 08       PUSH  A
    13C0: 9C A9    CALL  _setControllerSpeed
    13C2: 38 FD    ADD   SP,0xFD
(0398) 	steerCount = 0;
    13C4: 62 D0 00 MOV   REG[0xD0],0x0
    13C7: 55 37 00 MOV   [steerCount+1],0x0
    13CA: 55 36 00 MOV   [steerCount],0x0
    13CD: 38 FD    ADD   SP,0xFD
    13CF: 20       POP   X
    13D0: 7F       RET   
(0399) }
(0400) 
(0401) /******** INTERRUPTS ********/
(0402) 
(0403) //A ___|-----|_____|-----|____
(0404) //B   ____|-----|_____|-----|____
(0405) void PSoC_GPIO_ISR_C(void)
(0406) {
_PSoC_GPIO_ISR_C:
    13D1: 71 C0    OR    F,0xC0
    13D3: 08       PUSH  A
    13D4: 5D D0    MOV   A,REG[0xD0]
    13D6: 08       PUSH  A
(0407) 	curPrt = (PRT1DR & (OpEncA_MASK | OpEncB_MASK));		// Setting prevPort to only bits 1[4] and 1[5]
    13D7: 5D 04    MOV   A,REG[0x4]
    13D9: 21 30    AND   A,0x30
    13DB: 62 D0 00 MOV   REG[0xD0],0x0
    13DE: 53 45    MOV   [curPrt],A
(0408) 																// of PRT1DR
(0409) 		
(0410) 	if ((prevPrt == 0x00) && (curPrt == 0x10))	// If prevPort is 0x00 and then after the interrupt curPrt is
    13E0: 62 D0 00 MOV   REG[0xD0],0x0
    13E3: 3C 46 00 CMP   [prevPrt],0x0
    13E6: B0 13    JNZ   0x13FA
    13E8: 62 D0 00 MOV   REG[0xD0],0x0
    13EB: 3C 45 10 CMP   [curPrt],0x10
    13EE: B0 0B    JNZ   0x13FA
(0411) 												// 0x10 then A is high and B is low which means you wanted to
(0412) 												// increment by turning clockwise and hitting a rising edge on A
(0413) 	{
(0414) 		// Increasing the count when clockwise turn interrupt occurred
(0415) 		steerCount++;
    13F0: 62 D0 00 MOV   REG[0xD0],0x0
    13F3: 76 37    INC   [steerCount+1]
    13F5: 0E 36 00 ADC   [steerCount],0x0
(0416) 	}
    13F8: 80 19    JMP   0x1412
(0417) 	else if ((prevPrt == 0x00) && (curPrt == 0x20))	// If prevPort is 0x00 and then after the interrupt curPrt is
    13FA: 62 D0 00 MOV   REG[0xD0],0x0
    13FD: 3C 46 00 CMP   [prevPrt],0x0
    1400: B0 11    JNZ   0x1412
    1402: 62 D0 00 MOV   REG[0xD0],0x0
    1405: 3C 45 20 CMP   [curPrt],0x20
    1408: B0 09    JNZ   0x1412
(0418) 													// 0x20 then B is high and A is low which means you wanted to
(0419) 													// decrement by turning counterclockwise and hitting 
(0420) 													// a rising edge on B
(0421) 	{
(0422) 		// Decreasing the count when the counterclockwise interrupt occurred
(0423) 		steerCount--;
    140A: 62 D0 00 MOV   REG[0xD0],0x0
    140D: 7A 37    DEC   [steerCount+1]
    140F: 1E 36 00 SBB   [steerCount],0x0
(0424) 	}
    1412: 18       POP   A
    1413: 60 D0    MOV   REG[0xD0],A
    1415: 18       POP   A
    1416: 7E       RETI  
